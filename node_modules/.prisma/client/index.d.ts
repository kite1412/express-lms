
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model assignments
 * 
 */
export type assignments = $Result.DefaultSelection<Prisma.$assignmentsPayload>
/**
 * Model attendance
 * 
 */
export type attendance = $Result.DefaultSelection<Prisma.$attendancePayload>
/**
 * Model course_members
 * 
 */
export type course_members = $Result.DefaultSelection<Prisma.$course_membersPayload>
/**
 * Model courses
 * 
 */
export type courses = $Result.DefaultSelection<Prisma.$coursesPayload>
/**
 * Model grades
 * 
 */
export type grades = $Result.DefaultSelection<Prisma.$gradesPayload>
/**
 * Model submissions
 * 
 */
export type submissions = $Result.DefaultSelection<Prisma.$submissionsPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const attendance_status: {
  present: 'present',
  permission: 'permission',
  alpha: 'alpha'
};

export type attendance_status = (typeof attendance_status)[keyof typeof attendance_status]


export const course_members_role: {
  admin: 'admin',
  teacher: 'teacher',
  student: 'student'
};

export type course_members_role = (typeof course_members_role)[keyof typeof course_members_role]


export const users_role: {
  admin: 'admin',
  teacher: 'teacher',
  student: 'student'
};

export type users_role = (typeof users_role)[keyof typeof users_role]

}

export type attendance_status = $Enums.attendance_status

export const attendance_status: typeof $Enums.attendance_status

export type course_members_role = $Enums.course_members_role

export const course_members_role: typeof $Enums.course_members_role

export type users_role = $Enums.users_role

export const users_role: typeof $Enums.users_role

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Assignments
 * const assignments = await prisma.assignments.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Assignments
   * const assignments = await prisma.assignments.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.assignments`: Exposes CRUD operations for the **assignments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assignments
    * const assignments = await prisma.assignments.findMany()
    * ```
    */
  get assignments(): Prisma.assignmentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attendance`: Exposes CRUD operations for the **attendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendances
    * const attendances = await prisma.attendance.findMany()
    * ```
    */
  get attendance(): Prisma.attendanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.course_members`: Exposes CRUD operations for the **course_members** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Course_members
    * const course_members = await prisma.course_members.findMany()
    * ```
    */
  get course_members(): Prisma.course_membersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courses`: Exposes CRUD operations for the **courses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.courses.findMany()
    * ```
    */
  get courses(): Prisma.coursesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.grades`: Exposes CRUD operations for the **grades** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grades
    * const grades = await prisma.grades.findMany()
    * ```
    */
  get grades(): Prisma.gradesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.submissions`: Exposes CRUD operations for the **submissions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submissions
    * const submissions = await prisma.submissions.findMany()
    * ```
    */
  get submissions(): Prisma.submissionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    assignments: 'assignments',
    attendance: 'attendance',
    course_members: 'course_members',
    courses: 'courses',
    grades: 'grades',
    submissions: 'submissions',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "assignments" | "attendance" | "course_members" | "courses" | "grades" | "submissions" | "users"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      assignments: {
        payload: Prisma.$assignmentsPayload<ExtArgs>
        fields: Prisma.assignmentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.assignmentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.assignmentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>
          }
          findFirst: {
            args: Prisma.assignmentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.assignmentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>
          }
          findMany: {
            args: Prisma.assignmentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>[]
          }
          create: {
            args: Prisma.assignmentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>
          }
          createMany: {
            args: Prisma.assignmentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.assignmentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>
          }
          update: {
            args: Prisma.assignmentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>
          }
          deleteMany: {
            args: Prisma.assignmentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.assignmentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.assignmentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>
          }
          aggregate: {
            args: Prisma.AssignmentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssignments>
          }
          groupBy: {
            args: Prisma.assignmentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssignmentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.assignmentsCountArgs<ExtArgs>
            result: $Utils.Optional<AssignmentsCountAggregateOutputType> | number
          }
        }
      }
      attendance: {
        payload: Prisma.$attendancePayload<ExtArgs>
        fields: Prisma.attendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.attendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.attendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          findFirst: {
            args: Prisma.attendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.attendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          findMany: {
            args: Prisma.attendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>[]
          }
          create: {
            args: Prisma.attendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          createMany: {
            args: Prisma.attendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.attendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          update: {
            args: Prisma.attendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          deleteMany: {
            args: Prisma.attendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.attendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.attendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          aggregate: {
            args: Prisma.AttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendance>
          }
          groupBy: {
            args: Prisma.attendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.attendanceCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceCountAggregateOutputType> | number
          }
        }
      }
      course_members: {
        payload: Prisma.$course_membersPayload<ExtArgs>
        fields: Prisma.course_membersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.course_membersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_membersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.course_membersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_membersPayload>
          }
          findFirst: {
            args: Prisma.course_membersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_membersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.course_membersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_membersPayload>
          }
          findMany: {
            args: Prisma.course_membersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_membersPayload>[]
          }
          create: {
            args: Prisma.course_membersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_membersPayload>
          }
          createMany: {
            args: Prisma.course_membersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.course_membersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_membersPayload>
          }
          update: {
            args: Prisma.course_membersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_membersPayload>
          }
          deleteMany: {
            args: Prisma.course_membersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.course_membersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.course_membersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_membersPayload>
          }
          aggregate: {
            args: Prisma.Course_membersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse_members>
          }
          groupBy: {
            args: Prisma.course_membersGroupByArgs<ExtArgs>
            result: $Utils.Optional<Course_membersGroupByOutputType>[]
          }
          count: {
            args: Prisma.course_membersCountArgs<ExtArgs>
            result: $Utils.Optional<Course_membersCountAggregateOutputType> | number
          }
        }
      }
      courses: {
        payload: Prisma.$coursesPayload<ExtArgs>
        fields: Prisma.coursesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.coursesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.coursesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          findFirst: {
            args: Prisma.coursesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.coursesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          findMany: {
            args: Prisma.coursesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>[]
          }
          create: {
            args: Prisma.coursesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          createMany: {
            args: Prisma.coursesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.coursesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          update: {
            args: Prisma.coursesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          deleteMany: {
            args: Prisma.coursesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.coursesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.coursesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          aggregate: {
            args: Prisma.CoursesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourses>
          }
          groupBy: {
            args: Prisma.coursesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoursesGroupByOutputType>[]
          }
          count: {
            args: Prisma.coursesCountArgs<ExtArgs>
            result: $Utils.Optional<CoursesCountAggregateOutputType> | number
          }
        }
      }
      grades: {
        payload: Prisma.$gradesPayload<ExtArgs>
        fields: Prisma.gradesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.gradesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gradesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.gradesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gradesPayload>
          }
          findFirst: {
            args: Prisma.gradesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gradesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.gradesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gradesPayload>
          }
          findMany: {
            args: Prisma.gradesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gradesPayload>[]
          }
          create: {
            args: Prisma.gradesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gradesPayload>
          }
          createMany: {
            args: Prisma.gradesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.gradesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gradesPayload>
          }
          update: {
            args: Prisma.gradesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gradesPayload>
          }
          deleteMany: {
            args: Prisma.gradesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.gradesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.gradesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gradesPayload>
          }
          aggregate: {
            args: Prisma.GradesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrades>
          }
          groupBy: {
            args: Prisma.gradesGroupByArgs<ExtArgs>
            result: $Utils.Optional<GradesGroupByOutputType>[]
          }
          count: {
            args: Prisma.gradesCountArgs<ExtArgs>
            result: $Utils.Optional<GradesCountAggregateOutputType> | number
          }
        }
      }
      submissions: {
        payload: Prisma.$submissionsPayload<ExtArgs>
        fields: Prisma.submissionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.submissionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.submissionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionsPayload>
          }
          findFirst: {
            args: Prisma.submissionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.submissionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionsPayload>
          }
          findMany: {
            args: Prisma.submissionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionsPayload>[]
          }
          create: {
            args: Prisma.submissionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionsPayload>
          }
          createMany: {
            args: Prisma.submissionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.submissionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionsPayload>
          }
          update: {
            args: Prisma.submissionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionsPayload>
          }
          deleteMany: {
            args: Prisma.submissionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.submissionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.submissionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$submissionsPayload>
          }
          aggregate: {
            args: Prisma.SubmissionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmissions>
          }
          groupBy: {
            args: Prisma.submissionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.submissionsCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissionsCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    assignments?: assignmentsOmit
    attendance?: attendanceOmit
    course_members?: course_membersOmit
    courses?: coursesOmit
    grades?: gradesOmit
    submissions?: submissionsOmit
    users?: usersOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AssignmentsCountOutputType
   */

  export type AssignmentsCountOutputType = {
    submissions: number
  }

  export type AssignmentsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | AssignmentsCountOutputTypeCountSubmissionsArgs
  }

  // Custom InputTypes
  /**
   * AssignmentsCountOutputType without action
   */
  export type AssignmentsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentsCountOutputType
     */
    select?: AssignmentsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssignmentsCountOutputType without action
   */
  export type AssignmentsCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: submissionsWhereInput
  }


  /**
   * Count Type CoursesCountOutputType
   */

  export type CoursesCountOutputType = {
    assignments: number
    attendance: number
    course_members: number
  }

  export type CoursesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | CoursesCountOutputTypeCountAssignmentsArgs
    attendance?: boolean | CoursesCountOutputTypeCountAttendanceArgs
    course_members?: boolean | CoursesCountOutputTypeCountCourse_membersArgs
  }

  // Custom InputTypes
  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesCountOutputType
     */
    select?: CoursesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: assignmentsWhereInput
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: attendanceWhereInput
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountCourse_membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: course_membersWhereInput
  }


  /**
   * Count Type SubmissionsCountOutputType
   */

  export type SubmissionsCountOutputType = {
    grades: number
  }

  export type SubmissionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grades?: boolean | SubmissionsCountOutputTypeCountGradesArgs
  }

  // Custom InputTypes
  /**
   * SubmissionsCountOutputType without action
   */
  export type SubmissionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionsCountOutputType
     */
    select?: SubmissionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubmissionsCountOutputType without action
   */
  export type SubmissionsCountOutputTypeCountGradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: gradesWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    attendance: number
    course_members: number
    courses: number
    grades: number
    submissions: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendance?: boolean | UsersCountOutputTypeCountAttendanceArgs
    course_members?: boolean | UsersCountOutputTypeCountCourse_membersArgs
    courses?: boolean | UsersCountOutputTypeCountCoursesArgs
    grades?: boolean | UsersCountOutputTypeCountGradesArgs
    submissions?: boolean | UsersCountOutputTypeCountSubmissionsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: attendanceWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCourse_membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: course_membersWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: coursesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountGradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: gradesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: submissionsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model assignments
   */

  export type AggregateAssignments = {
    _count: AssignmentsCountAggregateOutputType | null
    _avg: AssignmentsAvgAggregateOutputType | null
    _sum: AssignmentsSumAggregateOutputType | null
    _min: AssignmentsMinAggregateOutputType | null
    _max: AssignmentsMaxAggregateOutputType | null
  }

  export type AssignmentsAvgAggregateOutputType = {
    assignment_id: number | null
    fk_assignments_course_id: number | null
  }

  export type AssignmentsSumAggregateOutputType = {
    assignment_id: number | null
    fk_assignments_course_id: number | null
  }

  export type AssignmentsMinAggregateOutputType = {
    assignment_id: number | null
    fk_assignments_course_id: number | null
    title: string | null
    description: string | null
    deadline: Date | null
    file_url: string | null
    created_at: Date | null
    deleted_at: Date | null
  }

  export type AssignmentsMaxAggregateOutputType = {
    assignment_id: number | null
    fk_assignments_course_id: number | null
    title: string | null
    description: string | null
    deadline: Date | null
    file_url: string | null
    created_at: Date | null
    deleted_at: Date | null
  }

  export type AssignmentsCountAggregateOutputType = {
    assignment_id: number
    fk_assignments_course_id: number
    title: number
    description: number
    deadline: number
    file_url: number
    created_at: number
    deleted_at: number
    _all: number
  }


  export type AssignmentsAvgAggregateInputType = {
    assignment_id?: true
    fk_assignments_course_id?: true
  }

  export type AssignmentsSumAggregateInputType = {
    assignment_id?: true
    fk_assignments_course_id?: true
  }

  export type AssignmentsMinAggregateInputType = {
    assignment_id?: true
    fk_assignments_course_id?: true
    title?: true
    description?: true
    deadline?: true
    file_url?: true
    created_at?: true
    deleted_at?: true
  }

  export type AssignmentsMaxAggregateInputType = {
    assignment_id?: true
    fk_assignments_course_id?: true
    title?: true
    description?: true
    deadline?: true
    file_url?: true
    created_at?: true
    deleted_at?: true
  }

  export type AssignmentsCountAggregateInputType = {
    assignment_id?: true
    fk_assignments_course_id?: true
    title?: true
    description?: true
    deadline?: true
    file_url?: true
    created_at?: true
    deleted_at?: true
    _all?: true
  }

  export type AssignmentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which assignments to aggregate.
     */
    where?: assignmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assignments to fetch.
     */
    orderBy?: assignmentsOrderByWithRelationInput | assignmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: assignmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned assignments
    **/
    _count?: true | AssignmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssignmentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssignmentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssignmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssignmentsMaxAggregateInputType
  }

  export type GetAssignmentsAggregateType<T extends AssignmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateAssignments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssignments[P]>
      : GetScalarType<T[P], AggregateAssignments[P]>
  }




  export type assignmentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: assignmentsWhereInput
    orderBy?: assignmentsOrderByWithAggregationInput | assignmentsOrderByWithAggregationInput[]
    by: AssignmentsScalarFieldEnum[] | AssignmentsScalarFieldEnum
    having?: assignmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssignmentsCountAggregateInputType | true
    _avg?: AssignmentsAvgAggregateInputType
    _sum?: AssignmentsSumAggregateInputType
    _min?: AssignmentsMinAggregateInputType
    _max?: AssignmentsMaxAggregateInputType
  }

  export type AssignmentsGroupByOutputType = {
    assignment_id: number
    fk_assignments_course_id: number
    title: string
    description: string
    deadline: Date
    file_url: string | null
    created_at: Date
    deleted_at: Date | null
    _count: AssignmentsCountAggregateOutputType | null
    _avg: AssignmentsAvgAggregateOutputType | null
    _sum: AssignmentsSumAggregateOutputType | null
    _min: AssignmentsMinAggregateOutputType | null
    _max: AssignmentsMaxAggregateOutputType | null
  }

  type GetAssignmentsGroupByPayload<T extends assignmentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssignmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssignmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssignmentsGroupByOutputType[P]>
            : GetScalarType<T[P], AssignmentsGroupByOutputType[P]>
        }
      >
    >


  export type assignmentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    assignment_id?: boolean
    fk_assignments_course_id?: boolean
    title?: boolean
    description?: boolean
    deadline?: boolean
    file_url?: boolean
    created_at?: boolean
    deleted_at?: boolean
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    submissions?: boolean | assignments$submissionsArgs<ExtArgs>
    _count?: boolean | AssignmentsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignments"]>



  export type assignmentsSelectScalar = {
    assignment_id?: boolean
    fk_assignments_course_id?: boolean
    title?: boolean
    description?: boolean
    deadline?: boolean
    file_url?: boolean
    created_at?: boolean
    deleted_at?: boolean
  }

  export type assignmentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"assignment_id" | "fk_assignments_course_id" | "title" | "description" | "deadline" | "file_url" | "created_at" | "deleted_at", ExtArgs["result"]["assignments"]>
  export type assignmentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    submissions?: boolean | assignments$submissionsArgs<ExtArgs>
    _count?: boolean | AssignmentsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $assignmentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "assignments"
    objects: {
      courses: Prisma.$coursesPayload<ExtArgs>
      submissions: Prisma.$submissionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      assignment_id: number
      fk_assignments_course_id: number
      title: string
      description: string
      deadline: Date
      file_url: string | null
      created_at: Date
      deleted_at: Date | null
    }, ExtArgs["result"]["assignments"]>
    composites: {}
  }

  type assignmentsGetPayload<S extends boolean | null | undefined | assignmentsDefaultArgs> = $Result.GetResult<Prisma.$assignmentsPayload, S>

  type assignmentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<assignmentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssignmentsCountAggregateInputType | true
    }

  export interface assignmentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['assignments'], meta: { name: 'assignments' } }
    /**
     * Find zero or one Assignments that matches the filter.
     * @param {assignmentsFindUniqueArgs} args - Arguments to find a Assignments
     * @example
     * // Get one Assignments
     * const assignments = await prisma.assignments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends assignmentsFindUniqueArgs>(args: SelectSubset<T, assignmentsFindUniqueArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Assignments that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {assignmentsFindUniqueOrThrowArgs} args - Arguments to find a Assignments
     * @example
     * // Get one Assignments
     * const assignments = await prisma.assignments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends assignmentsFindUniqueOrThrowArgs>(args: SelectSubset<T, assignmentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assignmentsFindFirstArgs} args - Arguments to find a Assignments
     * @example
     * // Get one Assignments
     * const assignments = await prisma.assignments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends assignmentsFindFirstArgs>(args?: SelectSubset<T, assignmentsFindFirstArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assignments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assignmentsFindFirstOrThrowArgs} args - Arguments to find a Assignments
     * @example
     * // Get one Assignments
     * const assignments = await prisma.assignments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends assignmentsFindFirstOrThrowArgs>(args?: SelectSubset<T, assignmentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Assignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assignmentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assignments
     * const assignments = await prisma.assignments.findMany()
     * 
     * // Get first 10 Assignments
     * const assignments = await prisma.assignments.findMany({ take: 10 })
     * 
     * // Only select the `assignment_id`
     * const assignmentsWithAssignment_idOnly = await prisma.assignments.findMany({ select: { assignment_id: true } })
     * 
     */
    findMany<T extends assignmentsFindManyArgs>(args?: SelectSubset<T, assignmentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Assignments.
     * @param {assignmentsCreateArgs} args - Arguments to create a Assignments.
     * @example
     * // Create one Assignments
     * const Assignments = await prisma.assignments.create({
     *   data: {
     *     // ... data to create a Assignments
     *   }
     * })
     * 
     */
    create<T extends assignmentsCreateArgs>(args: SelectSubset<T, assignmentsCreateArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Assignments.
     * @param {assignmentsCreateManyArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignments = await prisma.assignments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends assignmentsCreateManyArgs>(args?: SelectSubset<T, assignmentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Assignments.
     * @param {assignmentsDeleteArgs} args - Arguments to delete one Assignments.
     * @example
     * // Delete one Assignments
     * const Assignments = await prisma.assignments.delete({
     *   where: {
     *     // ... filter to delete one Assignments
     *   }
     * })
     * 
     */
    delete<T extends assignmentsDeleteArgs>(args: SelectSubset<T, assignmentsDeleteArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Assignments.
     * @param {assignmentsUpdateArgs} args - Arguments to update one Assignments.
     * @example
     * // Update one Assignments
     * const assignments = await prisma.assignments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends assignmentsUpdateArgs>(args: SelectSubset<T, assignmentsUpdateArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Assignments.
     * @param {assignmentsDeleteManyArgs} args - Arguments to filter Assignments to delete.
     * @example
     * // Delete a few Assignments
     * const { count } = await prisma.assignments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends assignmentsDeleteManyArgs>(args?: SelectSubset<T, assignmentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assignmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assignments
     * const assignments = await prisma.assignments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends assignmentsUpdateManyArgs>(args: SelectSubset<T, assignmentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Assignments.
     * @param {assignmentsUpsertArgs} args - Arguments to update or create a Assignments.
     * @example
     * // Update or create a Assignments
     * const assignments = await prisma.assignments.upsert({
     *   create: {
     *     // ... data to create a Assignments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assignments we want to update
     *   }
     * })
     */
    upsert<T extends assignmentsUpsertArgs>(args: SelectSubset<T, assignmentsUpsertArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assignmentsCountArgs} args - Arguments to filter Assignments to count.
     * @example
     * // Count the number of Assignments
     * const count = await prisma.assignments.count({
     *   where: {
     *     // ... the filter for the Assignments we want to count
     *   }
     * })
    **/
    count<T extends assignmentsCountArgs>(
      args?: Subset<T, assignmentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssignmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssignmentsAggregateArgs>(args: Subset<T, AssignmentsAggregateArgs>): Prisma.PrismaPromise<GetAssignmentsAggregateType<T>>

    /**
     * Group by Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assignmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends assignmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: assignmentsGroupByArgs['orderBy'] }
        : { orderBy?: assignmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, assignmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssignmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the assignments model
   */
  readonly fields: assignmentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for assignments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__assignmentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    courses<T extends coursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, coursesDefaultArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    submissions<T extends assignments$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, assignments$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$submissionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the assignments model
   */ 
  interface assignmentsFieldRefs {
    readonly assignment_id: FieldRef<"assignments", 'Int'>
    readonly fk_assignments_course_id: FieldRef<"assignments", 'Int'>
    readonly title: FieldRef<"assignments", 'String'>
    readonly description: FieldRef<"assignments", 'String'>
    readonly deadline: FieldRef<"assignments", 'DateTime'>
    readonly file_url: FieldRef<"assignments", 'String'>
    readonly created_at: FieldRef<"assignments", 'DateTime'>
    readonly deleted_at: FieldRef<"assignments", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * assignments findUnique
   */
  export type assignmentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which assignments to fetch.
     */
    where: assignmentsWhereUniqueInput
  }

  /**
   * assignments findUniqueOrThrow
   */
  export type assignmentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which assignments to fetch.
     */
    where: assignmentsWhereUniqueInput
  }

  /**
   * assignments findFirst
   */
  export type assignmentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which assignments to fetch.
     */
    where?: assignmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assignments to fetch.
     */
    orderBy?: assignmentsOrderByWithRelationInput | assignmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for assignments.
     */
    cursor?: assignmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of assignments.
     */
    distinct?: AssignmentsScalarFieldEnum | AssignmentsScalarFieldEnum[]
  }

  /**
   * assignments findFirstOrThrow
   */
  export type assignmentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which assignments to fetch.
     */
    where?: assignmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assignments to fetch.
     */
    orderBy?: assignmentsOrderByWithRelationInput | assignmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for assignments.
     */
    cursor?: assignmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of assignments.
     */
    distinct?: AssignmentsScalarFieldEnum | AssignmentsScalarFieldEnum[]
  }

  /**
   * assignments findMany
   */
  export type assignmentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which assignments to fetch.
     */
    where?: assignmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assignments to fetch.
     */
    orderBy?: assignmentsOrderByWithRelationInput | assignmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing assignments.
     */
    cursor?: assignmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assignments.
     */
    skip?: number
    distinct?: AssignmentsScalarFieldEnum | AssignmentsScalarFieldEnum[]
  }

  /**
   * assignments create
   */
  export type assignmentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * The data needed to create a assignments.
     */
    data: XOR<assignmentsCreateInput, assignmentsUncheckedCreateInput>
  }

  /**
   * assignments createMany
   */
  export type assignmentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many assignments.
     */
    data: assignmentsCreateManyInput | assignmentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * assignments update
   */
  export type assignmentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * The data needed to update a assignments.
     */
    data: XOR<assignmentsUpdateInput, assignmentsUncheckedUpdateInput>
    /**
     * Choose, which assignments to update.
     */
    where: assignmentsWhereUniqueInput
  }

  /**
   * assignments updateMany
   */
  export type assignmentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update assignments.
     */
    data: XOR<assignmentsUpdateManyMutationInput, assignmentsUncheckedUpdateManyInput>
    /**
     * Filter which assignments to update
     */
    where?: assignmentsWhereInput
    /**
     * Limit how many assignments to update.
     */
    limit?: number
  }

  /**
   * assignments upsert
   */
  export type assignmentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * The filter to search for the assignments to update in case it exists.
     */
    where: assignmentsWhereUniqueInput
    /**
     * In case the assignments found by the `where` argument doesn't exist, create a new assignments with this data.
     */
    create: XOR<assignmentsCreateInput, assignmentsUncheckedCreateInput>
    /**
     * In case the assignments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<assignmentsUpdateInput, assignmentsUncheckedUpdateInput>
  }

  /**
   * assignments delete
   */
  export type assignmentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * Filter which assignments to delete.
     */
    where: assignmentsWhereUniqueInput
  }

  /**
   * assignments deleteMany
   */
  export type assignmentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which assignments to delete
     */
    where?: assignmentsWhereInput
    /**
     * Limit how many assignments to delete.
     */
    limit?: number
  }

  /**
   * assignments.submissions
   */
  export type assignments$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submissions
     */
    select?: submissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submissions
     */
    omit?: submissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionsInclude<ExtArgs> | null
    where?: submissionsWhereInput
    orderBy?: submissionsOrderByWithRelationInput | submissionsOrderByWithRelationInput[]
    cursor?: submissionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionsScalarFieldEnum | SubmissionsScalarFieldEnum[]
  }

  /**
   * assignments without action
   */
  export type assignmentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
  }


  /**
   * Model attendance
   */

  export type AggregateAttendance = {
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  export type AttendanceAvgAggregateOutputType = {
    attendance_id: number | null
    fk_attendances_course_id: number | null
    fk_attendances_student_id: number | null
  }

  export type AttendanceSumAggregateOutputType = {
    attendance_id: number | null
    fk_attendances_course_id: number | null
    fk_attendances_student_id: number | null
  }

  export type AttendanceMinAggregateOutputType = {
    attendance_id: number | null
    fk_attendances_course_id: number | null
    fk_attendances_student_id: number | null
    status: $Enums.attendance_status | null
    date: Date | null
    deleted_at: Date | null
  }

  export type AttendanceMaxAggregateOutputType = {
    attendance_id: number | null
    fk_attendances_course_id: number | null
    fk_attendances_student_id: number | null
    status: $Enums.attendance_status | null
    date: Date | null
    deleted_at: Date | null
  }

  export type AttendanceCountAggregateOutputType = {
    attendance_id: number
    fk_attendances_course_id: number
    fk_attendances_student_id: number
    status: number
    date: number
    deleted_at: number
    _all: number
  }


  export type AttendanceAvgAggregateInputType = {
    attendance_id?: true
    fk_attendances_course_id?: true
    fk_attendances_student_id?: true
  }

  export type AttendanceSumAggregateInputType = {
    attendance_id?: true
    fk_attendances_course_id?: true
    fk_attendances_student_id?: true
  }

  export type AttendanceMinAggregateInputType = {
    attendance_id?: true
    fk_attendances_course_id?: true
    fk_attendances_student_id?: true
    status?: true
    date?: true
    deleted_at?: true
  }

  export type AttendanceMaxAggregateInputType = {
    attendance_id?: true
    fk_attendances_course_id?: true
    fk_attendances_student_id?: true
    status?: true
    date?: true
    deleted_at?: true
  }

  export type AttendanceCountAggregateInputType = {
    attendance_id?: true
    fk_attendances_course_id?: true
    fk_attendances_student_id?: true
    status?: true
    date?: true
    deleted_at?: true
    _all?: true
  }

  export type AttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which attendance to aggregate.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned attendances
    **/
    _count?: true | AttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceMaxAggregateInputType
  }

  export type GetAttendanceAggregateType<T extends AttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendance[P]>
      : GetScalarType<T[P], AggregateAttendance[P]>
  }




  export type attendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: attendanceWhereInput
    orderBy?: attendanceOrderByWithAggregationInput | attendanceOrderByWithAggregationInput[]
    by: AttendanceScalarFieldEnum[] | AttendanceScalarFieldEnum
    having?: attendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceCountAggregateInputType | true
    _avg?: AttendanceAvgAggregateInputType
    _sum?: AttendanceSumAggregateInputType
    _min?: AttendanceMinAggregateInputType
    _max?: AttendanceMaxAggregateInputType
  }

  export type AttendanceGroupByOutputType = {
    attendance_id: number
    fk_attendances_course_id: number
    fk_attendances_student_id: number
    status: $Enums.attendance_status
    date: Date
    deleted_at: Date | null
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  type GetAttendanceGroupByPayload<T extends attendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
        }
      >
    >


  export type attendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    attendance_id?: boolean
    fk_attendances_course_id?: boolean
    fk_attendances_student_id?: boolean
    status?: boolean
    date?: boolean
    deleted_at?: boolean
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>



  export type attendanceSelectScalar = {
    attendance_id?: boolean
    fk_attendances_course_id?: boolean
    fk_attendances_student_id?: boolean
    status?: boolean
    date?: boolean
    deleted_at?: boolean
  }

  export type attendanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"attendance_id" | "fk_attendances_course_id" | "fk_attendances_student_id" | "status" | "date" | "deleted_at", ExtArgs["result"]["attendance"]>
  export type attendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $attendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "attendance"
    objects: {
      courses: Prisma.$coursesPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      attendance_id: number
      fk_attendances_course_id: number
      fk_attendances_student_id: number
      status: $Enums.attendance_status
      date: Date
      deleted_at: Date | null
    }, ExtArgs["result"]["attendance"]>
    composites: {}
  }

  type attendanceGetPayload<S extends boolean | null | undefined | attendanceDefaultArgs> = $Result.GetResult<Prisma.$attendancePayload, S>

  type attendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<attendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttendanceCountAggregateInputType | true
    }

  export interface attendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['attendance'], meta: { name: 'attendance' } }
    /**
     * Find zero or one Attendance that matches the filter.
     * @param {attendanceFindUniqueArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends attendanceFindUniqueArgs>(args: SelectSubset<T, attendanceFindUniqueArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Attendance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {attendanceFindUniqueOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends attendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, attendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindFirstArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends attendanceFindFirstArgs>(args?: SelectSubset<T, attendanceFindFirstArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindFirstOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends attendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, attendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendances
     * const attendances = await prisma.attendance.findMany()
     * 
     * // Get first 10 Attendances
     * const attendances = await prisma.attendance.findMany({ take: 10 })
     * 
     * // Only select the `attendance_id`
     * const attendanceWithAttendance_idOnly = await prisma.attendance.findMany({ select: { attendance_id: true } })
     * 
     */
    findMany<T extends attendanceFindManyArgs>(args?: SelectSubset<T, attendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Attendance.
     * @param {attendanceCreateArgs} args - Arguments to create a Attendance.
     * @example
     * // Create one Attendance
     * const Attendance = await prisma.attendance.create({
     *   data: {
     *     // ... data to create a Attendance
     *   }
     * })
     * 
     */
    create<T extends attendanceCreateArgs>(args: SelectSubset<T, attendanceCreateArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Attendances.
     * @param {attendanceCreateManyArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends attendanceCreateManyArgs>(args?: SelectSubset<T, attendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Attendance.
     * @param {attendanceDeleteArgs} args - Arguments to delete one Attendance.
     * @example
     * // Delete one Attendance
     * const Attendance = await prisma.attendance.delete({
     *   where: {
     *     // ... filter to delete one Attendance
     *   }
     * })
     * 
     */
    delete<T extends attendanceDeleteArgs>(args: SelectSubset<T, attendanceDeleteArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Attendance.
     * @param {attendanceUpdateArgs} args - Arguments to update one Attendance.
     * @example
     * // Update one Attendance
     * const attendance = await prisma.attendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends attendanceUpdateArgs>(args: SelectSubset<T, attendanceUpdateArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Attendances.
     * @param {attendanceDeleteManyArgs} args - Arguments to filter Attendances to delete.
     * @example
     * // Delete a few Attendances
     * const { count } = await prisma.attendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends attendanceDeleteManyArgs>(args?: SelectSubset<T, attendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends attendanceUpdateManyArgs>(args: SelectSubset<T, attendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attendance.
     * @param {attendanceUpsertArgs} args - Arguments to update or create a Attendance.
     * @example
     * // Update or create a Attendance
     * const attendance = await prisma.attendance.upsert({
     *   create: {
     *     // ... data to create a Attendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendance we want to update
     *   }
     * })
     */
    upsert<T extends attendanceUpsertArgs>(args: SelectSubset<T, attendanceUpsertArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceCountArgs} args - Arguments to filter Attendances to count.
     * @example
     * // Count the number of Attendances
     * const count = await prisma.attendance.count({
     *   where: {
     *     // ... the filter for the Attendances we want to count
     *   }
     * })
    **/
    count<T extends attendanceCountArgs>(
      args?: Subset<T, attendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceAggregateArgs>(args: Subset<T, AttendanceAggregateArgs>): Prisma.PrismaPromise<GetAttendanceAggregateType<T>>

    /**
     * Group by Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends attendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: attendanceGroupByArgs['orderBy'] }
        : { orderBy?: attendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, attendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the attendance model
   */
  readonly fields: attendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for attendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__attendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    courses<T extends coursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, coursesDefaultArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the attendance model
   */ 
  interface attendanceFieldRefs {
    readonly attendance_id: FieldRef<"attendance", 'Int'>
    readonly fk_attendances_course_id: FieldRef<"attendance", 'Int'>
    readonly fk_attendances_student_id: FieldRef<"attendance", 'Int'>
    readonly status: FieldRef<"attendance", 'attendance_status'>
    readonly date: FieldRef<"attendance", 'DateTime'>
    readonly deleted_at: FieldRef<"attendance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * attendance findUnique
   */
  export type attendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance findUniqueOrThrow
   */
  export type attendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance findFirst
   */
  export type attendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance findFirstOrThrow
   */
  export type attendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance findMany
   */
  export type attendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendances to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance create
   */
  export type attendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a attendance.
     */
    data: XOR<attendanceCreateInput, attendanceUncheckedCreateInput>
  }

  /**
   * attendance createMany
   */
  export type attendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many attendances.
     */
    data: attendanceCreateManyInput | attendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * attendance update
   */
  export type attendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a attendance.
     */
    data: XOR<attendanceUpdateInput, attendanceUncheckedUpdateInput>
    /**
     * Choose, which attendance to update.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance updateMany
   */
  export type attendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update attendances.
     */
    data: XOR<attendanceUpdateManyMutationInput, attendanceUncheckedUpdateManyInput>
    /**
     * Filter which attendances to update
     */
    where?: attendanceWhereInput
    /**
     * Limit how many attendances to update.
     */
    limit?: number
  }

  /**
   * attendance upsert
   */
  export type attendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the attendance to update in case it exists.
     */
    where: attendanceWhereUniqueInput
    /**
     * In case the attendance found by the `where` argument doesn't exist, create a new attendance with this data.
     */
    create: XOR<attendanceCreateInput, attendanceUncheckedCreateInput>
    /**
     * In case the attendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<attendanceUpdateInput, attendanceUncheckedUpdateInput>
  }

  /**
   * attendance delete
   */
  export type attendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter which attendance to delete.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance deleteMany
   */
  export type attendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which attendances to delete
     */
    where?: attendanceWhereInput
    /**
     * Limit how many attendances to delete.
     */
    limit?: number
  }

  /**
   * attendance without action
   */
  export type attendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
  }


  /**
   * Model course_members
   */

  export type AggregateCourse_members = {
    _count: Course_membersCountAggregateOutputType | null
    _avg: Course_membersAvgAggregateOutputType | null
    _sum: Course_membersSumAggregateOutputType | null
    _min: Course_membersMinAggregateOutputType | null
    _max: Course_membersMaxAggregateOutputType | null
  }

  export type Course_membersAvgAggregateOutputType = {
    fk_course_members_course_id: number | null
    fk_course_members_user_id: number | null
  }

  export type Course_membersSumAggregateOutputType = {
    fk_course_members_course_id: number | null
    fk_course_members_user_id: number | null
  }

  export type Course_membersMinAggregateOutputType = {
    fk_course_members_course_id: number | null
    fk_course_members_user_id: number | null
    role: $Enums.course_members_role | null
    joined_at: Date | null
  }

  export type Course_membersMaxAggregateOutputType = {
    fk_course_members_course_id: number | null
    fk_course_members_user_id: number | null
    role: $Enums.course_members_role | null
    joined_at: Date | null
  }

  export type Course_membersCountAggregateOutputType = {
    fk_course_members_course_id: number
    fk_course_members_user_id: number
    role: number
    joined_at: number
    _all: number
  }


  export type Course_membersAvgAggregateInputType = {
    fk_course_members_course_id?: true
    fk_course_members_user_id?: true
  }

  export type Course_membersSumAggregateInputType = {
    fk_course_members_course_id?: true
    fk_course_members_user_id?: true
  }

  export type Course_membersMinAggregateInputType = {
    fk_course_members_course_id?: true
    fk_course_members_user_id?: true
    role?: true
    joined_at?: true
  }

  export type Course_membersMaxAggregateInputType = {
    fk_course_members_course_id?: true
    fk_course_members_user_id?: true
    role?: true
    joined_at?: true
  }

  export type Course_membersCountAggregateInputType = {
    fk_course_members_course_id?: true
    fk_course_members_user_id?: true
    role?: true
    joined_at?: true
    _all?: true
  }

  export type Course_membersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which course_members to aggregate.
     */
    where?: course_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of course_members to fetch.
     */
    orderBy?: course_membersOrderByWithRelationInput | course_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: course_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` course_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` course_members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned course_members
    **/
    _count?: true | Course_membersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Course_membersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Course_membersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Course_membersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Course_membersMaxAggregateInputType
  }

  export type GetCourse_membersAggregateType<T extends Course_membersAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse_members]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse_members[P]>
      : GetScalarType<T[P], AggregateCourse_members[P]>
  }




  export type course_membersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: course_membersWhereInput
    orderBy?: course_membersOrderByWithAggregationInput | course_membersOrderByWithAggregationInput[]
    by: Course_membersScalarFieldEnum[] | Course_membersScalarFieldEnum
    having?: course_membersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Course_membersCountAggregateInputType | true
    _avg?: Course_membersAvgAggregateInputType
    _sum?: Course_membersSumAggregateInputType
    _min?: Course_membersMinAggregateInputType
    _max?: Course_membersMaxAggregateInputType
  }

  export type Course_membersGroupByOutputType = {
    fk_course_members_course_id: number
    fk_course_members_user_id: number
    role: $Enums.course_members_role
    joined_at: Date
    _count: Course_membersCountAggregateOutputType | null
    _avg: Course_membersAvgAggregateOutputType | null
    _sum: Course_membersSumAggregateOutputType | null
    _min: Course_membersMinAggregateOutputType | null
    _max: Course_membersMaxAggregateOutputType | null
  }

  type GetCourse_membersGroupByPayload<T extends course_membersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Course_membersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Course_membersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Course_membersGroupByOutputType[P]>
            : GetScalarType<T[P], Course_membersGroupByOutputType[P]>
        }
      >
    >


  export type course_membersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    fk_course_members_course_id?: boolean
    fk_course_members_user_id?: boolean
    role?: boolean
    joined_at?: boolean
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course_members"]>



  export type course_membersSelectScalar = {
    fk_course_members_course_id?: boolean
    fk_course_members_user_id?: boolean
    role?: boolean
    joined_at?: boolean
  }

  export type course_membersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"fk_course_members_course_id" | "fk_course_members_user_id" | "role" | "joined_at", ExtArgs["result"]["course_members"]>
  export type course_membersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $course_membersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "course_members"
    objects: {
      courses: Prisma.$coursesPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      fk_course_members_course_id: number
      fk_course_members_user_id: number
      role: $Enums.course_members_role
      joined_at: Date
    }, ExtArgs["result"]["course_members"]>
    composites: {}
  }

  type course_membersGetPayload<S extends boolean | null | undefined | course_membersDefaultArgs> = $Result.GetResult<Prisma.$course_membersPayload, S>

  type course_membersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<course_membersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Course_membersCountAggregateInputType | true
    }

  export interface course_membersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['course_members'], meta: { name: 'course_members' } }
    /**
     * Find zero or one Course_members that matches the filter.
     * @param {course_membersFindUniqueArgs} args - Arguments to find a Course_members
     * @example
     * // Get one Course_members
     * const course_members = await prisma.course_members.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends course_membersFindUniqueArgs>(args: SelectSubset<T, course_membersFindUniqueArgs<ExtArgs>>): Prisma__course_membersClient<$Result.GetResult<Prisma.$course_membersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Course_members that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {course_membersFindUniqueOrThrowArgs} args - Arguments to find a Course_members
     * @example
     * // Get one Course_members
     * const course_members = await prisma.course_members.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends course_membersFindUniqueOrThrowArgs>(args: SelectSubset<T, course_membersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__course_membersClient<$Result.GetResult<Prisma.$course_membersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course_members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_membersFindFirstArgs} args - Arguments to find a Course_members
     * @example
     * // Get one Course_members
     * const course_members = await prisma.course_members.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends course_membersFindFirstArgs>(args?: SelectSubset<T, course_membersFindFirstArgs<ExtArgs>>): Prisma__course_membersClient<$Result.GetResult<Prisma.$course_membersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course_members that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_membersFindFirstOrThrowArgs} args - Arguments to find a Course_members
     * @example
     * // Get one Course_members
     * const course_members = await prisma.course_members.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends course_membersFindFirstOrThrowArgs>(args?: SelectSubset<T, course_membersFindFirstOrThrowArgs<ExtArgs>>): Prisma__course_membersClient<$Result.GetResult<Prisma.$course_membersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Course_members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_membersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Course_members
     * const course_members = await prisma.course_members.findMany()
     * 
     * // Get first 10 Course_members
     * const course_members = await prisma.course_members.findMany({ take: 10 })
     * 
     * // Only select the `fk_course_members_course_id`
     * const course_membersWithFk_course_members_course_idOnly = await prisma.course_members.findMany({ select: { fk_course_members_course_id: true } })
     * 
     */
    findMany<T extends course_membersFindManyArgs>(args?: SelectSubset<T, course_membersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$course_membersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Course_members.
     * @param {course_membersCreateArgs} args - Arguments to create a Course_members.
     * @example
     * // Create one Course_members
     * const Course_members = await prisma.course_members.create({
     *   data: {
     *     // ... data to create a Course_members
     *   }
     * })
     * 
     */
    create<T extends course_membersCreateArgs>(args: SelectSubset<T, course_membersCreateArgs<ExtArgs>>): Prisma__course_membersClient<$Result.GetResult<Prisma.$course_membersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Course_members.
     * @param {course_membersCreateManyArgs} args - Arguments to create many Course_members.
     * @example
     * // Create many Course_members
     * const course_members = await prisma.course_members.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends course_membersCreateManyArgs>(args?: SelectSubset<T, course_membersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Course_members.
     * @param {course_membersDeleteArgs} args - Arguments to delete one Course_members.
     * @example
     * // Delete one Course_members
     * const Course_members = await prisma.course_members.delete({
     *   where: {
     *     // ... filter to delete one Course_members
     *   }
     * })
     * 
     */
    delete<T extends course_membersDeleteArgs>(args: SelectSubset<T, course_membersDeleteArgs<ExtArgs>>): Prisma__course_membersClient<$Result.GetResult<Prisma.$course_membersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Course_members.
     * @param {course_membersUpdateArgs} args - Arguments to update one Course_members.
     * @example
     * // Update one Course_members
     * const course_members = await prisma.course_members.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends course_membersUpdateArgs>(args: SelectSubset<T, course_membersUpdateArgs<ExtArgs>>): Prisma__course_membersClient<$Result.GetResult<Prisma.$course_membersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Course_members.
     * @param {course_membersDeleteManyArgs} args - Arguments to filter Course_members to delete.
     * @example
     * // Delete a few Course_members
     * const { count } = await prisma.course_members.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends course_membersDeleteManyArgs>(args?: SelectSubset<T, course_membersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Course_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_membersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Course_members
     * const course_members = await prisma.course_members.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends course_membersUpdateManyArgs>(args: SelectSubset<T, course_membersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course_members.
     * @param {course_membersUpsertArgs} args - Arguments to update or create a Course_members.
     * @example
     * // Update or create a Course_members
     * const course_members = await prisma.course_members.upsert({
     *   create: {
     *     // ... data to create a Course_members
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course_members we want to update
     *   }
     * })
     */
    upsert<T extends course_membersUpsertArgs>(args: SelectSubset<T, course_membersUpsertArgs<ExtArgs>>): Prisma__course_membersClient<$Result.GetResult<Prisma.$course_membersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Course_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_membersCountArgs} args - Arguments to filter Course_members to count.
     * @example
     * // Count the number of Course_members
     * const count = await prisma.course_members.count({
     *   where: {
     *     // ... the filter for the Course_members we want to count
     *   }
     * })
    **/
    count<T extends course_membersCountArgs>(
      args?: Subset<T, course_membersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Course_membersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Course_membersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Course_membersAggregateArgs>(args: Subset<T, Course_membersAggregateArgs>): Prisma.PrismaPromise<GetCourse_membersAggregateType<T>>

    /**
     * Group by Course_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_membersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends course_membersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: course_membersGroupByArgs['orderBy'] }
        : { orderBy?: course_membersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, course_membersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourse_membersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the course_members model
   */
  readonly fields: course_membersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for course_members.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__course_membersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    courses<T extends coursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, coursesDefaultArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the course_members model
   */ 
  interface course_membersFieldRefs {
    readonly fk_course_members_course_id: FieldRef<"course_members", 'Int'>
    readonly fk_course_members_user_id: FieldRef<"course_members", 'Int'>
    readonly role: FieldRef<"course_members", 'course_members_role'>
    readonly joined_at: FieldRef<"course_members", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * course_members findUnique
   */
  export type course_membersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_members
     */
    select?: course_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_members
     */
    omit?: course_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_membersInclude<ExtArgs> | null
    /**
     * Filter, which course_members to fetch.
     */
    where: course_membersWhereUniqueInput
  }

  /**
   * course_members findUniqueOrThrow
   */
  export type course_membersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_members
     */
    select?: course_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_members
     */
    omit?: course_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_membersInclude<ExtArgs> | null
    /**
     * Filter, which course_members to fetch.
     */
    where: course_membersWhereUniqueInput
  }

  /**
   * course_members findFirst
   */
  export type course_membersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_members
     */
    select?: course_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_members
     */
    omit?: course_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_membersInclude<ExtArgs> | null
    /**
     * Filter, which course_members to fetch.
     */
    where?: course_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of course_members to fetch.
     */
    orderBy?: course_membersOrderByWithRelationInput | course_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for course_members.
     */
    cursor?: course_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` course_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` course_members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of course_members.
     */
    distinct?: Course_membersScalarFieldEnum | Course_membersScalarFieldEnum[]
  }

  /**
   * course_members findFirstOrThrow
   */
  export type course_membersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_members
     */
    select?: course_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_members
     */
    omit?: course_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_membersInclude<ExtArgs> | null
    /**
     * Filter, which course_members to fetch.
     */
    where?: course_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of course_members to fetch.
     */
    orderBy?: course_membersOrderByWithRelationInput | course_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for course_members.
     */
    cursor?: course_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` course_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` course_members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of course_members.
     */
    distinct?: Course_membersScalarFieldEnum | Course_membersScalarFieldEnum[]
  }

  /**
   * course_members findMany
   */
  export type course_membersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_members
     */
    select?: course_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_members
     */
    omit?: course_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_membersInclude<ExtArgs> | null
    /**
     * Filter, which course_members to fetch.
     */
    where?: course_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of course_members to fetch.
     */
    orderBy?: course_membersOrderByWithRelationInput | course_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing course_members.
     */
    cursor?: course_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` course_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` course_members.
     */
    skip?: number
    distinct?: Course_membersScalarFieldEnum | Course_membersScalarFieldEnum[]
  }

  /**
   * course_members create
   */
  export type course_membersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_members
     */
    select?: course_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_members
     */
    omit?: course_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_membersInclude<ExtArgs> | null
    /**
     * The data needed to create a course_members.
     */
    data: XOR<course_membersCreateInput, course_membersUncheckedCreateInput>
  }

  /**
   * course_members createMany
   */
  export type course_membersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many course_members.
     */
    data: course_membersCreateManyInput | course_membersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * course_members update
   */
  export type course_membersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_members
     */
    select?: course_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_members
     */
    omit?: course_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_membersInclude<ExtArgs> | null
    /**
     * The data needed to update a course_members.
     */
    data: XOR<course_membersUpdateInput, course_membersUncheckedUpdateInput>
    /**
     * Choose, which course_members to update.
     */
    where: course_membersWhereUniqueInput
  }

  /**
   * course_members updateMany
   */
  export type course_membersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update course_members.
     */
    data: XOR<course_membersUpdateManyMutationInput, course_membersUncheckedUpdateManyInput>
    /**
     * Filter which course_members to update
     */
    where?: course_membersWhereInput
    /**
     * Limit how many course_members to update.
     */
    limit?: number
  }

  /**
   * course_members upsert
   */
  export type course_membersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_members
     */
    select?: course_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_members
     */
    omit?: course_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_membersInclude<ExtArgs> | null
    /**
     * The filter to search for the course_members to update in case it exists.
     */
    where: course_membersWhereUniqueInput
    /**
     * In case the course_members found by the `where` argument doesn't exist, create a new course_members with this data.
     */
    create: XOR<course_membersCreateInput, course_membersUncheckedCreateInput>
    /**
     * In case the course_members was found with the provided `where` argument, update it with this data.
     */
    update: XOR<course_membersUpdateInput, course_membersUncheckedUpdateInput>
  }

  /**
   * course_members delete
   */
  export type course_membersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_members
     */
    select?: course_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_members
     */
    omit?: course_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_membersInclude<ExtArgs> | null
    /**
     * Filter which course_members to delete.
     */
    where: course_membersWhereUniqueInput
  }

  /**
   * course_members deleteMany
   */
  export type course_membersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which course_members to delete
     */
    where?: course_membersWhereInput
    /**
     * Limit how many course_members to delete.
     */
    limit?: number
  }

  /**
   * course_members without action
   */
  export type course_membersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_members
     */
    select?: course_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_members
     */
    omit?: course_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_membersInclude<ExtArgs> | null
  }


  /**
   * Model courses
   */

  export type AggregateCourses = {
    _count: CoursesCountAggregateOutputType | null
    _avg: CoursesAvgAggregateOutputType | null
    _sum: CoursesSumAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  export type CoursesAvgAggregateOutputType = {
    course_id: number | null
    fk_courses_teacher_id: number | null
  }

  export type CoursesSumAggregateOutputType = {
    course_id: number | null
    fk_courses_teacher_id: number | null
  }

  export type CoursesMinAggregateOutputType = {
    course_id: number | null
    name: string | null
    description: string | null
    code: string | null
    fk_courses_teacher_id: number | null
    created_at: Date | null
    course_img: string | null
    deleted_at: Date | null
  }

  export type CoursesMaxAggregateOutputType = {
    course_id: number | null
    name: string | null
    description: string | null
    code: string | null
    fk_courses_teacher_id: number | null
    created_at: Date | null
    course_img: string | null
    deleted_at: Date | null
  }

  export type CoursesCountAggregateOutputType = {
    course_id: number
    name: number
    description: number
    code: number
    fk_courses_teacher_id: number
    created_at: number
    course_img: number
    deleted_at: number
    _all: number
  }


  export type CoursesAvgAggregateInputType = {
    course_id?: true
    fk_courses_teacher_id?: true
  }

  export type CoursesSumAggregateInputType = {
    course_id?: true
    fk_courses_teacher_id?: true
  }

  export type CoursesMinAggregateInputType = {
    course_id?: true
    name?: true
    description?: true
    code?: true
    fk_courses_teacher_id?: true
    created_at?: true
    course_img?: true
    deleted_at?: true
  }

  export type CoursesMaxAggregateInputType = {
    course_id?: true
    name?: true
    description?: true
    code?: true
    fk_courses_teacher_id?: true
    created_at?: true
    course_img?: true
    deleted_at?: true
  }

  export type CoursesCountAggregateInputType = {
    course_id?: true
    name?: true
    description?: true
    code?: true
    fk_courses_teacher_id?: true
    created_at?: true
    course_img?: true
    deleted_at?: true
    _all?: true
  }

  export type CoursesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which courses to aggregate.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned courses
    **/
    _count?: true | CoursesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoursesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoursesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoursesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoursesMaxAggregateInputType
  }

  export type GetCoursesAggregateType<T extends CoursesAggregateArgs> = {
        [P in keyof T & keyof AggregateCourses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourses[P]>
      : GetScalarType<T[P], AggregateCourses[P]>
  }




  export type coursesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: coursesWhereInput
    orderBy?: coursesOrderByWithAggregationInput | coursesOrderByWithAggregationInput[]
    by: CoursesScalarFieldEnum[] | CoursesScalarFieldEnum
    having?: coursesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoursesCountAggregateInputType | true
    _avg?: CoursesAvgAggregateInputType
    _sum?: CoursesSumAggregateInputType
    _min?: CoursesMinAggregateInputType
    _max?: CoursesMaxAggregateInputType
  }

  export type CoursesGroupByOutputType = {
    course_id: number
    name: string
    description: string | null
    code: string
    fk_courses_teacher_id: number
    created_at: Date
    course_img: string | null
    deleted_at: Date | null
    _count: CoursesCountAggregateOutputType | null
    _avg: CoursesAvgAggregateOutputType | null
    _sum: CoursesSumAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  type GetCoursesGroupByPayload<T extends coursesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoursesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoursesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoursesGroupByOutputType[P]>
            : GetScalarType<T[P], CoursesGroupByOutputType[P]>
        }
      >
    >


  export type coursesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    fk_courses_teacher_id?: boolean
    created_at?: boolean
    course_img?: boolean
    deleted_at?: boolean
    assignments?: boolean | courses$assignmentsArgs<ExtArgs>
    attendance?: boolean | courses$attendanceArgs<ExtArgs>
    course_members?: boolean | courses$course_membersArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
    _count?: boolean | CoursesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courses"]>



  export type coursesSelectScalar = {
    course_id?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    fk_courses_teacher_id?: boolean
    created_at?: boolean
    course_img?: boolean
    deleted_at?: boolean
  }

  export type coursesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"course_id" | "name" | "description" | "code" | "fk_courses_teacher_id" | "created_at" | "course_img" | "deleted_at", ExtArgs["result"]["courses"]>
  export type coursesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | courses$assignmentsArgs<ExtArgs>
    attendance?: boolean | courses$attendanceArgs<ExtArgs>
    course_members?: boolean | courses$course_membersArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
    _count?: boolean | CoursesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $coursesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "courses"
    objects: {
      assignments: Prisma.$assignmentsPayload<ExtArgs>[]
      attendance: Prisma.$attendancePayload<ExtArgs>[]
      course_members: Prisma.$course_membersPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      course_id: number
      name: string
      description: string | null
      code: string
      fk_courses_teacher_id: number
      created_at: Date
      course_img: string | null
      deleted_at: Date | null
    }, ExtArgs["result"]["courses"]>
    composites: {}
  }

  type coursesGetPayload<S extends boolean | null | undefined | coursesDefaultArgs> = $Result.GetResult<Prisma.$coursesPayload, S>

  type coursesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<coursesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoursesCountAggregateInputType | true
    }

  export interface coursesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['courses'], meta: { name: 'courses' } }
    /**
     * Find zero or one Courses that matches the filter.
     * @param {coursesFindUniqueArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends coursesFindUniqueArgs>(args: SelectSubset<T, coursesFindUniqueArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Courses that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {coursesFindUniqueOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends coursesFindUniqueOrThrowArgs>(args: SelectSubset<T, coursesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesFindFirstArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends coursesFindFirstArgs>(args?: SelectSubset<T, coursesFindFirstArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Courses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesFindFirstOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends coursesFindFirstOrThrowArgs>(args?: SelectSubset<T, coursesFindFirstOrThrowArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.courses.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.courses.findMany({ take: 10 })
     * 
     * // Only select the `course_id`
     * const coursesWithCourse_idOnly = await prisma.courses.findMany({ select: { course_id: true } })
     * 
     */
    findMany<T extends coursesFindManyArgs>(args?: SelectSubset<T, coursesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Courses.
     * @param {coursesCreateArgs} args - Arguments to create a Courses.
     * @example
     * // Create one Courses
     * const Courses = await prisma.courses.create({
     *   data: {
     *     // ... data to create a Courses
     *   }
     * })
     * 
     */
    create<T extends coursesCreateArgs>(args: SelectSubset<T, coursesCreateArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {coursesCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends coursesCreateManyArgs>(args?: SelectSubset<T, coursesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Courses.
     * @param {coursesDeleteArgs} args - Arguments to delete one Courses.
     * @example
     * // Delete one Courses
     * const Courses = await prisma.courses.delete({
     *   where: {
     *     // ... filter to delete one Courses
     *   }
     * })
     * 
     */
    delete<T extends coursesDeleteArgs>(args: SelectSubset<T, coursesDeleteArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Courses.
     * @param {coursesUpdateArgs} args - Arguments to update one Courses.
     * @example
     * // Update one Courses
     * const courses = await prisma.courses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends coursesUpdateArgs>(args: SelectSubset<T, coursesUpdateArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {coursesDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.courses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends coursesDeleteManyArgs>(args?: SelectSubset<T, coursesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const courses = await prisma.courses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends coursesUpdateManyArgs>(args: SelectSubset<T, coursesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Courses.
     * @param {coursesUpsertArgs} args - Arguments to update or create a Courses.
     * @example
     * // Update or create a Courses
     * const courses = await prisma.courses.upsert({
     *   create: {
     *     // ... data to create a Courses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Courses we want to update
     *   }
     * })
     */
    upsert<T extends coursesUpsertArgs>(args: SelectSubset<T, coursesUpsertArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.courses.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends coursesCountArgs>(
      args?: Subset<T, coursesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoursesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoursesAggregateArgs>(args: Subset<T, CoursesAggregateArgs>): Prisma.PrismaPromise<GetCoursesAggregateType<T>>

    /**
     * Group by Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends coursesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: coursesGroupByArgs['orderBy'] }
        : { orderBy?: coursesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, coursesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoursesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the courses model
   */
  readonly fields: coursesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for courses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__coursesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignments<T extends courses$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, courses$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attendance<T extends courses$attendanceArgs<ExtArgs> = {}>(args?: Subset<T, courses$attendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    course_members<T extends courses$course_membersArgs<ExtArgs> = {}>(args?: Subset<T, courses$course_membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$course_membersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the courses model
   */ 
  interface coursesFieldRefs {
    readonly course_id: FieldRef<"courses", 'Int'>
    readonly name: FieldRef<"courses", 'String'>
    readonly description: FieldRef<"courses", 'String'>
    readonly code: FieldRef<"courses", 'String'>
    readonly fk_courses_teacher_id: FieldRef<"courses", 'Int'>
    readonly created_at: FieldRef<"courses", 'DateTime'>
    readonly course_img: FieldRef<"courses", 'String'>
    readonly deleted_at: FieldRef<"courses", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * courses findUnique
   */
  export type coursesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses findUniqueOrThrow
   */
  export type coursesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses findFirst
   */
  export type coursesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for courses.
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * courses findFirstOrThrow
   */
  export type coursesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for courses.
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * courses findMany
   */
  export type coursesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing courses.
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * courses create
   */
  export type coursesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * The data needed to create a courses.
     */
    data: XOR<coursesCreateInput, coursesUncheckedCreateInput>
  }

  /**
   * courses createMany
   */
  export type coursesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many courses.
     */
    data: coursesCreateManyInput | coursesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * courses update
   */
  export type coursesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * The data needed to update a courses.
     */
    data: XOR<coursesUpdateInput, coursesUncheckedUpdateInput>
    /**
     * Choose, which courses to update.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses updateMany
   */
  export type coursesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update courses.
     */
    data: XOR<coursesUpdateManyMutationInput, coursesUncheckedUpdateManyInput>
    /**
     * Filter which courses to update
     */
    where?: coursesWhereInput
    /**
     * Limit how many courses to update.
     */
    limit?: number
  }

  /**
   * courses upsert
   */
  export type coursesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * The filter to search for the courses to update in case it exists.
     */
    where: coursesWhereUniqueInput
    /**
     * In case the courses found by the `where` argument doesn't exist, create a new courses with this data.
     */
    create: XOR<coursesCreateInput, coursesUncheckedCreateInput>
    /**
     * In case the courses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<coursesUpdateInput, coursesUncheckedUpdateInput>
  }

  /**
   * courses delete
   */
  export type coursesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter which courses to delete.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses deleteMany
   */
  export type coursesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which courses to delete
     */
    where?: coursesWhereInput
    /**
     * Limit how many courses to delete.
     */
    limit?: number
  }

  /**
   * courses.assignments
   */
  export type courses$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    where?: assignmentsWhereInput
    orderBy?: assignmentsOrderByWithRelationInput | assignmentsOrderByWithRelationInput[]
    cursor?: assignmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentsScalarFieldEnum | AssignmentsScalarFieldEnum[]
  }

  /**
   * courses.attendance
   */
  export type courses$attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    where?: attendanceWhereInput
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    cursor?: attendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * courses.course_members
   */
  export type courses$course_membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_members
     */
    select?: course_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_members
     */
    omit?: course_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_membersInclude<ExtArgs> | null
    where?: course_membersWhereInput
    orderBy?: course_membersOrderByWithRelationInput | course_membersOrderByWithRelationInput[]
    cursor?: course_membersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Course_membersScalarFieldEnum | Course_membersScalarFieldEnum[]
  }

  /**
   * courses without action
   */
  export type coursesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
  }


  /**
   * Model grades
   */

  export type AggregateGrades = {
    _count: GradesCountAggregateOutputType | null
    _avg: GradesAvgAggregateOutputType | null
    _sum: GradesSumAggregateOutputType | null
    _min: GradesMinAggregateOutputType | null
    _max: GradesMaxAggregateOutputType | null
  }

  export type GradesAvgAggregateOutputType = {
    grades_id: number | null
    fk_grades_submission_id: number | null
    fk_grades_teacher_id: number | null
    score: Decimal | null
  }

  export type GradesSumAggregateOutputType = {
    grades_id: number | null
    fk_grades_submission_id: number | null
    fk_grades_teacher_id: number | null
    score: Decimal | null
  }

  export type GradesMinAggregateOutputType = {
    grades_id: number | null
    fk_grades_submission_id: number | null
    fk_grades_teacher_id: number | null
    score: Decimal | null
    feedback: string | null
    graded_at: Date | null
  }

  export type GradesMaxAggregateOutputType = {
    grades_id: number | null
    fk_grades_submission_id: number | null
    fk_grades_teacher_id: number | null
    score: Decimal | null
    feedback: string | null
    graded_at: Date | null
  }

  export type GradesCountAggregateOutputType = {
    grades_id: number
    fk_grades_submission_id: number
    fk_grades_teacher_id: number
    score: number
    feedback: number
    graded_at: number
    _all: number
  }


  export type GradesAvgAggregateInputType = {
    grades_id?: true
    fk_grades_submission_id?: true
    fk_grades_teacher_id?: true
    score?: true
  }

  export type GradesSumAggregateInputType = {
    grades_id?: true
    fk_grades_submission_id?: true
    fk_grades_teacher_id?: true
    score?: true
  }

  export type GradesMinAggregateInputType = {
    grades_id?: true
    fk_grades_submission_id?: true
    fk_grades_teacher_id?: true
    score?: true
    feedback?: true
    graded_at?: true
  }

  export type GradesMaxAggregateInputType = {
    grades_id?: true
    fk_grades_submission_id?: true
    fk_grades_teacher_id?: true
    score?: true
    feedback?: true
    graded_at?: true
  }

  export type GradesCountAggregateInputType = {
    grades_id?: true
    fk_grades_submission_id?: true
    fk_grades_teacher_id?: true
    score?: true
    feedback?: true
    graded_at?: true
    _all?: true
  }

  export type GradesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which grades to aggregate.
     */
    where?: gradesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of grades to fetch.
     */
    orderBy?: gradesOrderByWithRelationInput | gradesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: gradesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned grades
    **/
    _count?: true | GradesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GradesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GradesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GradesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GradesMaxAggregateInputType
  }

  export type GetGradesAggregateType<T extends GradesAggregateArgs> = {
        [P in keyof T & keyof AggregateGrades]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrades[P]>
      : GetScalarType<T[P], AggregateGrades[P]>
  }




  export type gradesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: gradesWhereInput
    orderBy?: gradesOrderByWithAggregationInput | gradesOrderByWithAggregationInput[]
    by: GradesScalarFieldEnum[] | GradesScalarFieldEnum
    having?: gradesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GradesCountAggregateInputType | true
    _avg?: GradesAvgAggregateInputType
    _sum?: GradesSumAggregateInputType
    _min?: GradesMinAggregateInputType
    _max?: GradesMaxAggregateInputType
  }

  export type GradesGroupByOutputType = {
    grades_id: number
    fk_grades_submission_id: number | null
    fk_grades_teacher_id: number | null
    score: Decimal | null
    feedback: string | null
    graded_at: Date
    _count: GradesCountAggregateOutputType | null
    _avg: GradesAvgAggregateOutputType | null
    _sum: GradesSumAggregateOutputType | null
    _min: GradesMinAggregateOutputType | null
    _max: GradesMaxAggregateOutputType | null
  }

  type GetGradesGroupByPayload<T extends gradesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GradesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GradesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GradesGroupByOutputType[P]>
            : GetScalarType<T[P], GradesGroupByOutputType[P]>
        }
      >
    >


  export type gradesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    grades_id?: boolean
    fk_grades_submission_id?: boolean
    fk_grades_teacher_id?: boolean
    score?: boolean
    feedback?: boolean
    graded_at?: boolean
    submissions?: boolean | grades$submissionsArgs<ExtArgs>
    users?: boolean | grades$usersArgs<ExtArgs>
  }, ExtArgs["result"]["grades"]>



  export type gradesSelectScalar = {
    grades_id?: boolean
    fk_grades_submission_id?: boolean
    fk_grades_teacher_id?: boolean
    score?: boolean
    feedback?: boolean
    graded_at?: boolean
  }

  export type gradesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"grades_id" | "fk_grades_submission_id" | "fk_grades_teacher_id" | "score" | "feedback" | "graded_at", ExtArgs["result"]["grades"]>
  export type gradesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | grades$submissionsArgs<ExtArgs>
    users?: boolean | grades$usersArgs<ExtArgs>
  }

  export type $gradesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "grades"
    objects: {
      submissions: Prisma.$submissionsPayload<ExtArgs> | null
      users: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      grades_id: number
      fk_grades_submission_id: number | null
      fk_grades_teacher_id: number | null
      score: Prisma.Decimal | null
      feedback: string | null
      graded_at: Date
    }, ExtArgs["result"]["grades"]>
    composites: {}
  }

  type gradesGetPayload<S extends boolean | null | undefined | gradesDefaultArgs> = $Result.GetResult<Prisma.$gradesPayload, S>

  type gradesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<gradesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GradesCountAggregateInputType | true
    }

  export interface gradesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['grades'], meta: { name: 'grades' } }
    /**
     * Find zero or one Grades that matches the filter.
     * @param {gradesFindUniqueArgs} args - Arguments to find a Grades
     * @example
     * // Get one Grades
     * const grades = await prisma.grades.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends gradesFindUniqueArgs>(args: SelectSubset<T, gradesFindUniqueArgs<ExtArgs>>): Prisma__gradesClient<$Result.GetResult<Prisma.$gradesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Grades that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {gradesFindUniqueOrThrowArgs} args - Arguments to find a Grades
     * @example
     * // Get one Grades
     * const grades = await prisma.grades.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends gradesFindUniqueOrThrowArgs>(args: SelectSubset<T, gradesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__gradesClient<$Result.GetResult<Prisma.$gradesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Grades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gradesFindFirstArgs} args - Arguments to find a Grades
     * @example
     * // Get one Grades
     * const grades = await prisma.grades.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends gradesFindFirstArgs>(args?: SelectSubset<T, gradesFindFirstArgs<ExtArgs>>): Prisma__gradesClient<$Result.GetResult<Prisma.$gradesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Grades that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gradesFindFirstOrThrowArgs} args - Arguments to find a Grades
     * @example
     * // Get one Grades
     * const grades = await prisma.grades.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends gradesFindFirstOrThrowArgs>(args?: SelectSubset<T, gradesFindFirstOrThrowArgs<ExtArgs>>): Prisma__gradesClient<$Result.GetResult<Prisma.$gradesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Grades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gradesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grades
     * const grades = await prisma.grades.findMany()
     * 
     * // Get first 10 Grades
     * const grades = await prisma.grades.findMany({ take: 10 })
     * 
     * // Only select the `grades_id`
     * const gradesWithGrades_idOnly = await prisma.grades.findMany({ select: { grades_id: true } })
     * 
     */
    findMany<T extends gradesFindManyArgs>(args?: SelectSubset<T, gradesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gradesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Grades.
     * @param {gradesCreateArgs} args - Arguments to create a Grades.
     * @example
     * // Create one Grades
     * const Grades = await prisma.grades.create({
     *   data: {
     *     // ... data to create a Grades
     *   }
     * })
     * 
     */
    create<T extends gradesCreateArgs>(args: SelectSubset<T, gradesCreateArgs<ExtArgs>>): Prisma__gradesClient<$Result.GetResult<Prisma.$gradesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Grades.
     * @param {gradesCreateManyArgs} args - Arguments to create many Grades.
     * @example
     * // Create many Grades
     * const grades = await prisma.grades.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends gradesCreateManyArgs>(args?: SelectSubset<T, gradesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Grades.
     * @param {gradesDeleteArgs} args - Arguments to delete one Grades.
     * @example
     * // Delete one Grades
     * const Grades = await prisma.grades.delete({
     *   where: {
     *     // ... filter to delete one Grades
     *   }
     * })
     * 
     */
    delete<T extends gradesDeleteArgs>(args: SelectSubset<T, gradesDeleteArgs<ExtArgs>>): Prisma__gradesClient<$Result.GetResult<Prisma.$gradesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Grades.
     * @param {gradesUpdateArgs} args - Arguments to update one Grades.
     * @example
     * // Update one Grades
     * const grades = await prisma.grades.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends gradesUpdateArgs>(args: SelectSubset<T, gradesUpdateArgs<ExtArgs>>): Prisma__gradesClient<$Result.GetResult<Prisma.$gradesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Grades.
     * @param {gradesDeleteManyArgs} args - Arguments to filter Grades to delete.
     * @example
     * // Delete a few Grades
     * const { count } = await prisma.grades.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends gradesDeleteManyArgs>(args?: SelectSubset<T, gradesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gradesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grades
     * const grades = await prisma.grades.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends gradesUpdateManyArgs>(args: SelectSubset<T, gradesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Grades.
     * @param {gradesUpsertArgs} args - Arguments to update or create a Grades.
     * @example
     * // Update or create a Grades
     * const grades = await prisma.grades.upsert({
     *   create: {
     *     // ... data to create a Grades
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grades we want to update
     *   }
     * })
     */
    upsert<T extends gradesUpsertArgs>(args: SelectSubset<T, gradesUpsertArgs<ExtArgs>>): Prisma__gradesClient<$Result.GetResult<Prisma.$gradesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gradesCountArgs} args - Arguments to filter Grades to count.
     * @example
     * // Count the number of Grades
     * const count = await prisma.grades.count({
     *   where: {
     *     // ... the filter for the Grades we want to count
     *   }
     * })
    **/
    count<T extends gradesCountArgs>(
      args?: Subset<T, gradesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GradesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GradesAggregateArgs>(args: Subset<T, GradesAggregateArgs>): Prisma.PrismaPromise<GetGradesAggregateType<T>>

    /**
     * Group by Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gradesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends gradesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: gradesGroupByArgs['orderBy'] }
        : { orderBy?: gradesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, gradesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGradesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the grades model
   */
  readonly fields: gradesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for grades.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__gradesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    submissions<T extends grades$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, grades$submissionsArgs<ExtArgs>>): Prisma__submissionsClient<$Result.GetResult<Prisma.$submissionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    users<T extends grades$usersArgs<ExtArgs> = {}>(args?: Subset<T, grades$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the grades model
   */ 
  interface gradesFieldRefs {
    readonly grades_id: FieldRef<"grades", 'Int'>
    readonly fk_grades_submission_id: FieldRef<"grades", 'Int'>
    readonly fk_grades_teacher_id: FieldRef<"grades", 'Int'>
    readonly score: FieldRef<"grades", 'Decimal'>
    readonly feedback: FieldRef<"grades", 'String'>
    readonly graded_at: FieldRef<"grades", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * grades findUnique
   */
  export type gradesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the grades
     */
    select?: gradesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the grades
     */
    omit?: gradesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gradesInclude<ExtArgs> | null
    /**
     * Filter, which grades to fetch.
     */
    where: gradesWhereUniqueInput
  }

  /**
   * grades findUniqueOrThrow
   */
  export type gradesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the grades
     */
    select?: gradesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the grades
     */
    omit?: gradesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gradesInclude<ExtArgs> | null
    /**
     * Filter, which grades to fetch.
     */
    where: gradesWhereUniqueInput
  }

  /**
   * grades findFirst
   */
  export type gradesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the grades
     */
    select?: gradesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the grades
     */
    omit?: gradesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gradesInclude<ExtArgs> | null
    /**
     * Filter, which grades to fetch.
     */
    where?: gradesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of grades to fetch.
     */
    orderBy?: gradesOrderByWithRelationInput | gradesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for grades.
     */
    cursor?: gradesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of grades.
     */
    distinct?: GradesScalarFieldEnum | GradesScalarFieldEnum[]
  }

  /**
   * grades findFirstOrThrow
   */
  export type gradesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the grades
     */
    select?: gradesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the grades
     */
    omit?: gradesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gradesInclude<ExtArgs> | null
    /**
     * Filter, which grades to fetch.
     */
    where?: gradesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of grades to fetch.
     */
    orderBy?: gradesOrderByWithRelationInput | gradesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for grades.
     */
    cursor?: gradesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of grades.
     */
    distinct?: GradesScalarFieldEnum | GradesScalarFieldEnum[]
  }

  /**
   * grades findMany
   */
  export type gradesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the grades
     */
    select?: gradesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the grades
     */
    omit?: gradesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gradesInclude<ExtArgs> | null
    /**
     * Filter, which grades to fetch.
     */
    where?: gradesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of grades to fetch.
     */
    orderBy?: gradesOrderByWithRelationInput | gradesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing grades.
     */
    cursor?: gradesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` grades.
     */
    skip?: number
    distinct?: GradesScalarFieldEnum | GradesScalarFieldEnum[]
  }

  /**
   * grades create
   */
  export type gradesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the grades
     */
    select?: gradesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the grades
     */
    omit?: gradesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gradesInclude<ExtArgs> | null
    /**
     * The data needed to create a grades.
     */
    data?: XOR<gradesCreateInput, gradesUncheckedCreateInput>
  }

  /**
   * grades createMany
   */
  export type gradesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many grades.
     */
    data: gradesCreateManyInput | gradesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * grades update
   */
  export type gradesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the grades
     */
    select?: gradesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the grades
     */
    omit?: gradesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gradesInclude<ExtArgs> | null
    /**
     * The data needed to update a grades.
     */
    data: XOR<gradesUpdateInput, gradesUncheckedUpdateInput>
    /**
     * Choose, which grades to update.
     */
    where: gradesWhereUniqueInput
  }

  /**
   * grades updateMany
   */
  export type gradesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update grades.
     */
    data: XOR<gradesUpdateManyMutationInput, gradesUncheckedUpdateManyInput>
    /**
     * Filter which grades to update
     */
    where?: gradesWhereInput
    /**
     * Limit how many grades to update.
     */
    limit?: number
  }

  /**
   * grades upsert
   */
  export type gradesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the grades
     */
    select?: gradesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the grades
     */
    omit?: gradesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gradesInclude<ExtArgs> | null
    /**
     * The filter to search for the grades to update in case it exists.
     */
    where: gradesWhereUniqueInput
    /**
     * In case the grades found by the `where` argument doesn't exist, create a new grades with this data.
     */
    create: XOR<gradesCreateInput, gradesUncheckedCreateInput>
    /**
     * In case the grades was found with the provided `where` argument, update it with this data.
     */
    update: XOR<gradesUpdateInput, gradesUncheckedUpdateInput>
  }

  /**
   * grades delete
   */
  export type gradesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the grades
     */
    select?: gradesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the grades
     */
    omit?: gradesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gradesInclude<ExtArgs> | null
    /**
     * Filter which grades to delete.
     */
    where: gradesWhereUniqueInput
  }

  /**
   * grades deleteMany
   */
  export type gradesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which grades to delete
     */
    where?: gradesWhereInput
    /**
     * Limit how many grades to delete.
     */
    limit?: number
  }

  /**
   * grades.submissions
   */
  export type grades$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submissions
     */
    select?: submissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submissions
     */
    omit?: submissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionsInclude<ExtArgs> | null
    where?: submissionsWhereInput
  }

  /**
   * grades.users
   */
  export type grades$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * grades without action
   */
  export type gradesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the grades
     */
    select?: gradesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the grades
     */
    omit?: gradesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gradesInclude<ExtArgs> | null
  }


  /**
   * Model submissions
   */

  export type AggregateSubmissions = {
    _count: SubmissionsCountAggregateOutputType | null
    _avg: SubmissionsAvgAggregateOutputType | null
    _sum: SubmissionsSumAggregateOutputType | null
    _min: SubmissionsMinAggregateOutputType | null
    _max: SubmissionsMaxAggregateOutputType | null
  }

  export type SubmissionsAvgAggregateOutputType = {
    submission_id: number | null
    fk_submissions_assignment_id: number | null
    fk_submissions_student_id: number | null
  }

  export type SubmissionsSumAggregateOutputType = {
    submission_id: number | null
    fk_submissions_assignment_id: number | null
    fk_submissions_student_id: number | null
  }

  export type SubmissionsMinAggregateOutputType = {
    submission_id: number | null
    fk_submissions_assignment_id: number | null
    fk_submissions_student_id: number | null
    file_url: string | null
    submitted_at: Date | null
  }

  export type SubmissionsMaxAggregateOutputType = {
    submission_id: number | null
    fk_submissions_assignment_id: number | null
    fk_submissions_student_id: number | null
    file_url: string | null
    submitted_at: Date | null
  }

  export type SubmissionsCountAggregateOutputType = {
    submission_id: number
    fk_submissions_assignment_id: number
    fk_submissions_student_id: number
    file_url: number
    submitted_at: number
    _all: number
  }


  export type SubmissionsAvgAggregateInputType = {
    submission_id?: true
    fk_submissions_assignment_id?: true
    fk_submissions_student_id?: true
  }

  export type SubmissionsSumAggregateInputType = {
    submission_id?: true
    fk_submissions_assignment_id?: true
    fk_submissions_student_id?: true
  }

  export type SubmissionsMinAggregateInputType = {
    submission_id?: true
    fk_submissions_assignment_id?: true
    fk_submissions_student_id?: true
    file_url?: true
    submitted_at?: true
  }

  export type SubmissionsMaxAggregateInputType = {
    submission_id?: true
    fk_submissions_assignment_id?: true
    fk_submissions_student_id?: true
    file_url?: true
    submitted_at?: true
  }

  export type SubmissionsCountAggregateInputType = {
    submission_id?: true
    fk_submissions_assignment_id?: true
    fk_submissions_student_id?: true
    file_url?: true
    submitted_at?: true
    _all?: true
  }

  export type SubmissionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which submissions to aggregate.
     */
    where?: submissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of submissions to fetch.
     */
    orderBy?: submissionsOrderByWithRelationInput | submissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: submissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned submissions
    **/
    _count?: true | SubmissionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubmissionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubmissionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionsMaxAggregateInputType
  }

  export type GetSubmissionsAggregateType<T extends SubmissionsAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmissions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmissions[P]>
      : GetScalarType<T[P], AggregateSubmissions[P]>
  }




  export type submissionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: submissionsWhereInput
    orderBy?: submissionsOrderByWithAggregationInput | submissionsOrderByWithAggregationInput[]
    by: SubmissionsScalarFieldEnum[] | SubmissionsScalarFieldEnum
    having?: submissionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionsCountAggregateInputType | true
    _avg?: SubmissionsAvgAggregateInputType
    _sum?: SubmissionsSumAggregateInputType
    _min?: SubmissionsMinAggregateInputType
    _max?: SubmissionsMaxAggregateInputType
  }

  export type SubmissionsGroupByOutputType = {
    submission_id: number
    fk_submissions_assignment_id: number
    fk_submissions_student_id: number | null
    file_url: string
    submitted_at: Date
    _count: SubmissionsCountAggregateOutputType | null
    _avg: SubmissionsAvgAggregateOutputType | null
    _sum: SubmissionsSumAggregateOutputType | null
    _min: SubmissionsMinAggregateOutputType | null
    _max: SubmissionsMaxAggregateOutputType | null
  }

  type GetSubmissionsGroupByPayload<T extends submissionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionsGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionsGroupByOutputType[P]>
        }
      >
    >


  export type submissionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    submission_id?: boolean
    fk_submissions_assignment_id?: boolean
    fk_submissions_student_id?: boolean
    file_url?: boolean
    submitted_at?: boolean
    grades?: boolean | submissions$gradesArgs<ExtArgs>
    assignments?: boolean | assignmentsDefaultArgs<ExtArgs>
    users?: boolean | submissions$usersArgs<ExtArgs>
    _count?: boolean | SubmissionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submissions"]>



  export type submissionsSelectScalar = {
    submission_id?: boolean
    fk_submissions_assignment_id?: boolean
    fk_submissions_student_id?: boolean
    file_url?: boolean
    submitted_at?: boolean
  }

  export type submissionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"submission_id" | "fk_submissions_assignment_id" | "fk_submissions_student_id" | "file_url" | "submitted_at", ExtArgs["result"]["submissions"]>
  export type submissionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grades?: boolean | submissions$gradesArgs<ExtArgs>
    assignments?: boolean | assignmentsDefaultArgs<ExtArgs>
    users?: boolean | submissions$usersArgs<ExtArgs>
    _count?: boolean | SubmissionsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $submissionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "submissions"
    objects: {
      grades: Prisma.$gradesPayload<ExtArgs>[]
      assignments: Prisma.$assignmentsPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      submission_id: number
      fk_submissions_assignment_id: number
      fk_submissions_student_id: number | null
      file_url: string
      submitted_at: Date
    }, ExtArgs["result"]["submissions"]>
    composites: {}
  }

  type submissionsGetPayload<S extends boolean | null | undefined | submissionsDefaultArgs> = $Result.GetResult<Prisma.$submissionsPayload, S>

  type submissionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<submissionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubmissionsCountAggregateInputType | true
    }

  export interface submissionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['submissions'], meta: { name: 'submissions' } }
    /**
     * Find zero or one Submissions that matches the filter.
     * @param {submissionsFindUniqueArgs} args - Arguments to find a Submissions
     * @example
     * // Get one Submissions
     * const submissions = await prisma.submissions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends submissionsFindUniqueArgs>(args: SelectSubset<T, submissionsFindUniqueArgs<ExtArgs>>): Prisma__submissionsClient<$Result.GetResult<Prisma.$submissionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Submissions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {submissionsFindUniqueOrThrowArgs} args - Arguments to find a Submissions
     * @example
     * // Get one Submissions
     * const submissions = await prisma.submissions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends submissionsFindUniqueOrThrowArgs>(args: SelectSubset<T, submissionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__submissionsClient<$Result.GetResult<Prisma.$submissionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submissionsFindFirstArgs} args - Arguments to find a Submissions
     * @example
     * // Get one Submissions
     * const submissions = await prisma.submissions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends submissionsFindFirstArgs>(args?: SelectSubset<T, submissionsFindFirstArgs<ExtArgs>>): Prisma__submissionsClient<$Result.GetResult<Prisma.$submissionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submissions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submissionsFindFirstOrThrowArgs} args - Arguments to find a Submissions
     * @example
     * // Get one Submissions
     * const submissions = await prisma.submissions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends submissionsFindFirstOrThrowArgs>(args?: SelectSubset<T, submissionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__submissionsClient<$Result.GetResult<Prisma.$submissionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Submissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submissionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submissions
     * const submissions = await prisma.submissions.findMany()
     * 
     * // Get first 10 Submissions
     * const submissions = await prisma.submissions.findMany({ take: 10 })
     * 
     * // Only select the `submission_id`
     * const submissionsWithSubmission_idOnly = await prisma.submissions.findMany({ select: { submission_id: true } })
     * 
     */
    findMany<T extends submissionsFindManyArgs>(args?: SelectSubset<T, submissionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$submissionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Submissions.
     * @param {submissionsCreateArgs} args - Arguments to create a Submissions.
     * @example
     * // Create one Submissions
     * const Submissions = await prisma.submissions.create({
     *   data: {
     *     // ... data to create a Submissions
     *   }
     * })
     * 
     */
    create<T extends submissionsCreateArgs>(args: SelectSubset<T, submissionsCreateArgs<ExtArgs>>): Prisma__submissionsClient<$Result.GetResult<Prisma.$submissionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Submissions.
     * @param {submissionsCreateManyArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submissions = await prisma.submissions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends submissionsCreateManyArgs>(args?: SelectSubset<T, submissionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Submissions.
     * @param {submissionsDeleteArgs} args - Arguments to delete one Submissions.
     * @example
     * // Delete one Submissions
     * const Submissions = await prisma.submissions.delete({
     *   where: {
     *     // ... filter to delete one Submissions
     *   }
     * })
     * 
     */
    delete<T extends submissionsDeleteArgs>(args: SelectSubset<T, submissionsDeleteArgs<ExtArgs>>): Prisma__submissionsClient<$Result.GetResult<Prisma.$submissionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Submissions.
     * @param {submissionsUpdateArgs} args - Arguments to update one Submissions.
     * @example
     * // Update one Submissions
     * const submissions = await prisma.submissions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends submissionsUpdateArgs>(args: SelectSubset<T, submissionsUpdateArgs<ExtArgs>>): Prisma__submissionsClient<$Result.GetResult<Prisma.$submissionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Submissions.
     * @param {submissionsDeleteManyArgs} args - Arguments to filter Submissions to delete.
     * @example
     * // Delete a few Submissions
     * const { count } = await prisma.submissions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends submissionsDeleteManyArgs>(args?: SelectSubset<T, submissionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submissionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submissions
     * const submissions = await prisma.submissions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends submissionsUpdateManyArgs>(args: SelectSubset<T, submissionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Submissions.
     * @param {submissionsUpsertArgs} args - Arguments to update or create a Submissions.
     * @example
     * // Update or create a Submissions
     * const submissions = await prisma.submissions.upsert({
     *   create: {
     *     // ... data to create a Submissions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submissions we want to update
     *   }
     * })
     */
    upsert<T extends submissionsUpsertArgs>(args: SelectSubset<T, submissionsUpsertArgs<ExtArgs>>): Prisma__submissionsClient<$Result.GetResult<Prisma.$submissionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submissionsCountArgs} args - Arguments to filter Submissions to count.
     * @example
     * // Count the number of Submissions
     * const count = await prisma.submissions.count({
     *   where: {
     *     // ... the filter for the Submissions we want to count
     *   }
     * })
    **/
    count<T extends submissionsCountArgs>(
      args?: Subset<T, submissionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionsAggregateArgs>(args: Subset<T, SubmissionsAggregateArgs>): Prisma.PrismaPromise<GetSubmissionsAggregateType<T>>

    /**
     * Group by Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submissionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends submissionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: submissionsGroupByArgs['orderBy'] }
        : { orderBy?: submissionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, submissionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the submissions model
   */
  readonly fields: submissionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for submissions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__submissionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grades<T extends submissions$gradesArgs<ExtArgs> = {}>(args?: Subset<T, submissions$gradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gradesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignments<T extends assignmentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, assignmentsDefaultArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends submissions$usersArgs<ExtArgs> = {}>(args?: Subset<T, submissions$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the submissions model
   */ 
  interface submissionsFieldRefs {
    readonly submission_id: FieldRef<"submissions", 'Int'>
    readonly fk_submissions_assignment_id: FieldRef<"submissions", 'Int'>
    readonly fk_submissions_student_id: FieldRef<"submissions", 'Int'>
    readonly file_url: FieldRef<"submissions", 'String'>
    readonly submitted_at: FieldRef<"submissions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * submissions findUnique
   */
  export type submissionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submissions
     */
    select?: submissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submissions
     */
    omit?: submissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionsInclude<ExtArgs> | null
    /**
     * Filter, which submissions to fetch.
     */
    where: submissionsWhereUniqueInput
  }

  /**
   * submissions findUniqueOrThrow
   */
  export type submissionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submissions
     */
    select?: submissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submissions
     */
    omit?: submissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionsInclude<ExtArgs> | null
    /**
     * Filter, which submissions to fetch.
     */
    where: submissionsWhereUniqueInput
  }

  /**
   * submissions findFirst
   */
  export type submissionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submissions
     */
    select?: submissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submissions
     */
    omit?: submissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionsInclude<ExtArgs> | null
    /**
     * Filter, which submissions to fetch.
     */
    where?: submissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of submissions to fetch.
     */
    orderBy?: submissionsOrderByWithRelationInput | submissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for submissions.
     */
    cursor?: submissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of submissions.
     */
    distinct?: SubmissionsScalarFieldEnum | SubmissionsScalarFieldEnum[]
  }

  /**
   * submissions findFirstOrThrow
   */
  export type submissionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submissions
     */
    select?: submissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submissions
     */
    omit?: submissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionsInclude<ExtArgs> | null
    /**
     * Filter, which submissions to fetch.
     */
    where?: submissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of submissions to fetch.
     */
    orderBy?: submissionsOrderByWithRelationInput | submissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for submissions.
     */
    cursor?: submissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of submissions.
     */
    distinct?: SubmissionsScalarFieldEnum | SubmissionsScalarFieldEnum[]
  }

  /**
   * submissions findMany
   */
  export type submissionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submissions
     */
    select?: submissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submissions
     */
    omit?: submissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionsInclude<ExtArgs> | null
    /**
     * Filter, which submissions to fetch.
     */
    where?: submissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of submissions to fetch.
     */
    orderBy?: submissionsOrderByWithRelationInput | submissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing submissions.
     */
    cursor?: submissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` submissions.
     */
    skip?: number
    distinct?: SubmissionsScalarFieldEnum | SubmissionsScalarFieldEnum[]
  }

  /**
   * submissions create
   */
  export type submissionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submissions
     */
    select?: submissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submissions
     */
    omit?: submissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionsInclude<ExtArgs> | null
    /**
     * The data needed to create a submissions.
     */
    data: XOR<submissionsCreateInput, submissionsUncheckedCreateInput>
  }

  /**
   * submissions createMany
   */
  export type submissionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many submissions.
     */
    data: submissionsCreateManyInput | submissionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * submissions update
   */
  export type submissionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submissions
     */
    select?: submissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submissions
     */
    omit?: submissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionsInclude<ExtArgs> | null
    /**
     * The data needed to update a submissions.
     */
    data: XOR<submissionsUpdateInput, submissionsUncheckedUpdateInput>
    /**
     * Choose, which submissions to update.
     */
    where: submissionsWhereUniqueInput
  }

  /**
   * submissions updateMany
   */
  export type submissionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update submissions.
     */
    data: XOR<submissionsUpdateManyMutationInput, submissionsUncheckedUpdateManyInput>
    /**
     * Filter which submissions to update
     */
    where?: submissionsWhereInput
    /**
     * Limit how many submissions to update.
     */
    limit?: number
  }

  /**
   * submissions upsert
   */
  export type submissionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submissions
     */
    select?: submissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submissions
     */
    omit?: submissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionsInclude<ExtArgs> | null
    /**
     * The filter to search for the submissions to update in case it exists.
     */
    where: submissionsWhereUniqueInput
    /**
     * In case the submissions found by the `where` argument doesn't exist, create a new submissions with this data.
     */
    create: XOR<submissionsCreateInput, submissionsUncheckedCreateInput>
    /**
     * In case the submissions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<submissionsUpdateInput, submissionsUncheckedUpdateInput>
  }

  /**
   * submissions delete
   */
  export type submissionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submissions
     */
    select?: submissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submissions
     */
    omit?: submissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionsInclude<ExtArgs> | null
    /**
     * Filter which submissions to delete.
     */
    where: submissionsWhereUniqueInput
  }

  /**
   * submissions deleteMany
   */
  export type submissionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which submissions to delete
     */
    where?: submissionsWhereInput
    /**
     * Limit how many submissions to delete.
     */
    limit?: number
  }

  /**
   * submissions.grades
   */
  export type submissions$gradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the grades
     */
    select?: gradesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the grades
     */
    omit?: gradesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gradesInclude<ExtArgs> | null
    where?: gradesWhereInput
    orderBy?: gradesOrderByWithRelationInput | gradesOrderByWithRelationInput[]
    cursor?: gradesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GradesScalarFieldEnum | GradesScalarFieldEnum[]
  }

  /**
   * submissions.users
   */
  export type submissions$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * submissions without action
   */
  export type submissionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submissions
     */
    select?: submissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submissions
     */
    omit?: submissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionsInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    user_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    user_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    user_id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.users_role | null
    created_at: Date | null
    profile_picture: string | null
    deleted_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    user_id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.users_role | null
    created_at: Date | null
    profile_picture: string | null
    deleted_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    user_id: number
    name: number
    email: number
    password: number
    role: number
    created_at: number
    profile_picture: number
    deleted_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    user_id?: true
  }

  export type UsersSumAggregateInputType = {
    user_id?: true
  }

  export type UsersMinAggregateInputType = {
    user_id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    created_at?: true
    profile_picture?: true
    deleted_at?: true
  }

  export type UsersMaxAggregateInputType = {
    user_id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    created_at?: true
    profile_picture?: true
    deleted_at?: true
  }

  export type UsersCountAggregateInputType = {
    user_id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    created_at?: true
    profile_picture?: true
    deleted_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    user_id: number
    name: string
    email: string
    password: string
    role: $Enums.users_role
    created_at: Date
    profile_picture: string | null
    deleted_at: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    created_at?: boolean
    profile_picture?: boolean
    deleted_at?: boolean
    attendance?: boolean | users$attendanceArgs<ExtArgs>
    course_members?: boolean | users$course_membersArgs<ExtArgs>
    courses?: boolean | users$coursesArgs<ExtArgs>
    grades?: boolean | users$gradesArgs<ExtArgs>
    submissions?: boolean | users$submissionsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>



  export type usersSelectScalar = {
    user_id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    created_at?: boolean
    profile_picture?: boolean
    deleted_at?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"user_id" | "name" | "email" | "password" | "role" | "created_at" | "profile_picture" | "deleted_at", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendance?: boolean | users$attendanceArgs<ExtArgs>
    course_members?: boolean | users$course_membersArgs<ExtArgs>
    courses?: boolean | users$coursesArgs<ExtArgs>
    grades?: boolean | users$gradesArgs<ExtArgs>
    submissions?: boolean | users$submissionsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      attendance: Prisma.$attendancePayload<ExtArgs>[]
      course_members: Prisma.$course_membersPayload<ExtArgs>[]
      courses: Prisma.$coursesPayload<ExtArgs>[]
      grades: Prisma.$gradesPayload<ExtArgs>[]
      submissions: Prisma.$submissionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      name: string
      email: string
      password: string
      role: $Enums.users_role
      created_at: Date
      profile_picture: string | null
      deleted_at: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const usersWithUser_idOnly = await prisma.users.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attendance<T extends users$attendanceArgs<ExtArgs> = {}>(args?: Subset<T, users$attendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    course_members<T extends users$course_membersArgs<ExtArgs> = {}>(args?: Subset<T, users$course_membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$course_membersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courses<T extends users$coursesArgs<ExtArgs> = {}>(args?: Subset<T, users$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    grades<T extends users$gradesArgs<ExtArgs> = {}>(args?: Subset<T, users$gradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gradesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submissions<T extends users$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, users$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$submissionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly user_id: FieldRef<"users", 'Int'>
    readonly name: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'users_role'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly profile_picture: FieldRef<"users", 'String'>
    readonly deleted_at: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.attendance
   */
  export type users$attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    where?: attendanceWhereInput
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    cursor?: attendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * users.course_members
   */
  export type users$course_membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_members
     */
    select?: course_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the course_members
     */
    omit?: course_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_membersInclude<ExtArgs> | null
    where?: course_membersWhereInput
    orderBy?: course_membersOrderByWithRelationInput | course_membersOrderByWithRelationInput[]
    cursor?: course_membersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Course_membersScalarFieldEnum | Course_membersScalarFieldEnum[]
  }

  /**
   * users.courses
   */
  export type users$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    where?: coursesWhereInput
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    cursor?: coursesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * users.grades
   */
  export type users$gradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the grades
     */
    select?: gradesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the grades
     */
    omit?: gradesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gradesInclude<ExtArgs> | null
    where?: gradesWhereInput
    orderBy?: gradesOrderByWithRelationInput | gradesOrderByWithRelationInput[]
    cursor?: gradesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GradesScalarFieldEnum | GradesScalarFieldEnum[]
  }

  /**
   * users.submissions
   */
  export type users$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submissions
     */
    select?: submissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the submissions
     */
    omit?: submissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: submissionsInclude<ExtArgs> | null
    where?: submissionsWhereInput
    orderBy?: submissionsOrderByWithRelationInput | submissionsOrderByWithRelationInput[]
    cursor?: submissionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionsScalarFieldEnum | SubmissionsScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AssignmentsScalarFieldEnum: {
    assignment_id: 'assignment_id',
    fk_assignments_course_id: 'fk_assignments_course_id',
    title: 'title',
    description: 'description',
    deadline: 'deadline',
    file_url: 'file_url',
    created_at: 'created_at',
    deleted_at: 'deleted_at'
  };

  export type AssignmentsScalarFieldEnum = (typeof AssignmentsScalarFieldEnum)[keyof typeof AssignmentsScalarFieldEnum]


  export const AttendanceScalarFieldEnum: {
    attendance_id: 'attendance_id',
    fk_attendances_course_id: 'fk_attendances_course_id',
    fk_attendances_student_id: 'fk_attendances_student_id',
    status: 'status',
    date: 'date',
    deleted_at: 'deleted_at'
  };

  export type AttendanceScalarFieldEnum = (typeof AttendanceScalarFieldEnum)[keyof typeof AttendanceScalarFieldEnum]


  export const Course_membersScalarFieldEnum: {
    fk_course_members_course_id: 'fk_course_members_course_id',
    fk_course_members_user_id: 'fk_course_members_user_id',
    role: 'role',
    joined_at: 'joined_at'
  };

  export type Course_membersScalarFieldEnum = (typeof Course_membersScalarFieldEnum)[keyof typeof Course_membersScalarFieldEnum]


  export const CoursesScalarFieldEnum: {
    course_id: 'course_id',
    name: 'name',
    description: 'description',
    code: 'code',
    fk_courses_teacher_id: 'fk_courses_teacher_id',
    created_at: 'created_at',
    course_img: 'course_img',
    deleted_at: 'deleted_at'
  };

  export type CoursesScalarFieldEnum = (typeof CoursesScalarFieldEnum)[keyof typeof CoursesScalarFieldEnum]


  export const GradesScalarFieldEnum: {
    grades_id: 'grades_id',
    fk_grades_submission_id: 'fk_grades_submission_id',
    fk_grades_teacher_id: 'fk_grades_teacher_id',
    score: 'score',
    feedback: 'feedback',
    graded_at: 'graded_at'
  };

  export type GradesScalarFieldEnum = (typeof GradesScalarFieldEnum)[keyof typeof GradesScalarFieldEnum]


  export const SubmissionsScalarFieldEnum: {
    submission_id: 'submission_id',
    fk_submissions_assignment_id: 'fk_submissions_assignment_id',
    fk_submissions_student_id: 'fk_submissions_student_id',
    file_url: 'file_url',
    submitted_at: 'submitted_at'
  };

  export type SubmissionsScalarFieldEnum = (typeof SubmissionsScalarFieldEnum)[keyof typeof SubmissionsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    user_id: 'user_id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    created_at: 'created_at',
    profile_picture: 'profile_picture',
    deleted_at: 'deleted_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const assignmentsOrderByRelevanceFieldEnum: {
    title: 'title',
    description: 'description',
    file_url: 'file_url'
  };

  export type assignmentsOrderByRelevanceFieldEnum = (typeof assignmentsOrderByRelevanceFieldEnum)[keyof typeof assignmentsOrderByRelevanceFieldEnum]


  export const coursesOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description',
    code: 'code',
    course_img: 'course_img'
  };

  export type coursesOrderByRelevanceFieldEnum = (typeof coursesOrderByRelevanceFieldEnum)[keyof typeof coursesOrderByRelevanceFieldEnum]


  export const gradesOrderByRelevanceFieldEnum: {
    feedback: 'feedback'
  };

  export type gradesOrderByRelevanceFieldEnum = (typeof gradesOrderByRelevanceFieldEnum)[keyof typeof gradesOrderByRelevanceFieldEnum]


  export const submissionsOrderByRelevanceFieldEnum: {
    file_url: 'file_url'
  };

  export type submissionsOrderByRelevanceFieldEnum = (typeof submissionsOrderByRelevanceFieldEnum)[keyof typeof submissionsOrderByRelevanceFieldEnum]


  export const usersOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    password: 'password',
    profile_picture: 'profile_picture'
  };

  export type usersOrderByRelevanceFieldEnum = (typeof usersOrderByRelevanceFieldEnum)[keyof typeof usersOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'attendance_status'
   */
  export type Enumattendance_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'attendance_status'>
    


  /**
   * Reference to a field of type 'course_members_role'
   */
  export type Enumcourse_members_roleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'course_members_role'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'users_role'
   */
  export type Enumusers_roleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'users_role'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type assignmentsWhereInput = {
    AND?: assignmentsWhereInput | assignmentsWhereInput[]
    OR?: assignmentsWhereInput[]
    NOT?: assignmentsWhereInput | assignmentsWhereInput[]
    assignment_id?: IntFilter<"assignments"> | number
    fk_assignments_course_id?: IntFilter<"assignments"> | number
    title?: StringFilter<"assignments"> | string
    description?: StringFilter<"assignments"> | string
    deadline?: DateTimeFilter<"assignments"> | Date | string
    file_url?: StringNullableFilter<"assignments"> | string | null
    created_at?: DateTimeFilter<"assignments"> | Date | string
    deleted_at?: DateTimeNullableFilter<"assignments"> | Date | string | null
    courses?: XOR<CoursesScalarRelationFilter, coursesWhereInput>
    submissions?: SubmissionsListRelationFilter
  }

  export type assignmentsOrderByWithRelationInput = {
    assignment_id?: SortOrder
    fk_assignments_course_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    file_url?: SortOrderInput | SortOrder
    created_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    courses?: coursesOrderByWithRelationInput
    submissions?: submissionsOrderByRelationAggregateInput
    _relevance?: assignmentsOrderByRelevanceInput
  }

  export type assignmentsWhereUniqueInput = Prisma.AtLeast<{
    assignment_id?: number
    AND?: assignmentsWhereInput | assignmentsWhereInput[]
    OR?: assignmentsWhereInput[]
    NOT?: assignmentsWhereInput | assignmentsWhereInput[]
    fk_assignments_course_id?: IntFilter<"assignments"> | number
    title?: StringFilter<"assignments"> | string
    description?: StringFilter<"assignments"> | string
    deadline?: DateTimeFilter<"assignments"> | Date | string
    file_url?: StringNullableFilter<"assignments"> | string | null
    created_at?: DateTimeFilter<"assignments"> | Date | string
    deleted_at?: DateTimeNullableFilter<"assignments"> | Date | string | null
    courses?: XOR<CoursesScalarRelationFilter, coursesWhereInput>
    submissions?: SubmissionsListRelationFilter
  }, "assignment_id">

  export type assignmentsOrderByWithAggregationInput = {
    assignment_id?: SortOrder
    fk_assignments_course_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    file_url?: SortOrderInput | SortOrder
    created_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    _count?: assignmentsCountOrderByAggregateInput
    _avg?: assignmentsAvgOrderByAggregateInput
    _max?: assignmentsMaxOrderByAggregateInput
    _min?: assignmentsMinOrderByAggregateInput
    _sum?: assignmentsSumOrderByAggregateInput
  }

  export type assignmentsScalarWhereWithAggregatesInput = {
    AND?: assignmentsScalarWhereWithAggregatesInput | assignmentsScalarWhereWithAggregatesInput[]
    OR?: assignmentsScalarWhereWithAggregatesInput[]
    NOT?: assignmentsScalarWhereWithAggregatesInput | assignmentsScalarWhereWithAggregatesInput[]
    assignment_id?: IntWithAggregatesFilter<"assignments"> | number
    fk_assignments_course_id?: IntWithAggregatesFilter<"assignments"> | number
    title?: StringWithAggregatesFilter<"assignments"> | string
    description?: StringWithAggregatesFilter<"assignments"> | string
    deadline?: DateTimeWithAggregatesFilter<"assignments"> | Date | string
    file_url?: StringNullableWithAggregatesFilter<"assignments"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"assignments"> | Date | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"assignments"> | Date | string | null
  }

  export type attendanceWhereInput = {
    AND?: attendanceWhereInput | attendanceWhereInput[]
    OR?: attendanceWhereInput[]
    NOT?: attendanceWhereInput | attendanceWhereInput[]
    attendance_id?: IntFilter<"attendance"> | number
    fk_attendances_course_id?: IntFilter<"attendance"> | number
    fk_attendances_student_id?: IntFilter<"attendance"> | number
    status?: Enumattendance_statusFilter<"attendance"> | $Enums.attendance_status
    date?: DateTimeFilter<"attendance"> | Date | string
    deleted_at?: DateTimeNullableFilter<"attendance"> | Date | string | null
    courses?: XOR<CoursesScalarRelationFilter, coursesWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type attendanceOrderByWithRelationInput = {
    attendance_id?: SortOrder
    fk_attendances_course_id?: SortOrder
    fk_attendances_student_id?: SortOrder
    status?: SortOrder
    date?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    courses?: coursesOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type attendanceWhereUniqueInput = Prisma.AtLeast<{
    attendance_id?: number
    AND?: attendanceWhereInput | attendanceWhereInput[]
    OR?: attendanceWhereInput[]
    NOT?: attendanceWhereInput | attendanceWhereInput[]
    fk_attendances_course_id?: IntFilter<"attendance"> | number
    fk_attendances_student_id?: IntFilter<"attendance"> | number
    status?: Enumattendance_statusFilter<"attendance"> | $Enums.attendance_status
    date?: DateTimeFilter<"attendance"> | Date | string
    deleted_at?: DateTimeNullableFilter<"attendance"> | Date | string | null
    courses?: XOR<CoursesScalarRelationFilter, coursesWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "attendance_id">

  export type attendanceOrderByWithAggregationInput = {
    attendance_id?: SortOrder
    fk_attendances_course_id?: SortOrder
    fk_attendances_student_id?: SortOrder
    status?: SortOrder
    date?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    _count?: attendanceCountOrderByAggregateInput
    _avg?: attendanceAvgOrderByAggregateInput
    _max?: attendanceMaxOrderByAggregateInput
    _min?: attendanceMinOrderByAggregateInput
    _sum?: attendanceSumOrderByAggregateInput
  }

  export type attendanceScalarWhereWithAggregatesInput = {
    AND?: attendanceScalarWhereWithAggregatesInput | attendanceScalarWhereWithAggregatesInput[]
    OR?: attendanceScalarWhereWithAggregatesInput[]
    NOT?: attendanceScalarWhereWithAggregatesInput | attendanceScalarWhereWithAggregatesInput[]
    attendance_id?: IntWithAggregatesFilter<"attendance"> | number
    fk_attendances_course_id?: IntWithAggregatesFilter<"attendance"> | number
    fk_attendances_student_id?: IntWithAggregatesFilter<"attendance"> | number
    status?: Enumattendance_statusWithAggregatesFilter<"attendance"> | $Enums.attendance_status
    date?: DateTimeWithAggregatesFilter<"attendance"> | Date | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"attendance"> | Date | string | null
  }

  export type course_membersWhereInput = {
    AND?: course_membersWhereInput | course_membersWhereInput[]
    OR?: course_membersWhereInput[]
    NOT?: course_membersWhereInput | course_membersWhereInput[]
    fk_course_members_course_id?: IntFilter<"course_members"> | number
    fk_course_members_user_id?: IntFilter<"course_members"> | number
    role?: Enumcourse_members_roleFilter<"course_members"> | $Enums.course_members_role
    joined_at?: DateTimeFilter<"course_members"> | Date | string
    courses?: XOR<CoursesScalarRelationFilter, coursesWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type course_membersOrderByWithRelationInput = {
    fk_course_members_course_id?: SortOrder
    fk_course_members_user_id?: SortOrder
    role?: SortOrder
    joined_at?: SortOrder
    courses?: coursesOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type course_membersWhereUniqueInput = Prisma.AtLeast<{
    fk_course_members_course_id_fk_course_members_user_id?: course_membersFk_course_members_course_idFk_course_members_user_idCompoundUniqueInput
    AND?: course_membersWhereInput | course_membersWhereInput[]
    OR?: course_membersWhereInput[]
    NOT?: course_membersWhereInput | course_membersWhereInput[]
    fk_course_members_course_id?: IntFilter<"course_members"> | number
    fk_course_members_user_id?: IntFilter<"course_members"> | number
    role?: Enumcourse_members_roleFilter<"course_members"> | $Enums.course_members_role
    joined_at?: DateTimeFilter<"course_members"> | Date | string
    courses?: XOR<CoursesScalarRelationFilter, coursesWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "fk_course_members_course_id_fk_course_members_user_id">

  export type course_membersOrderByWithAggregationInput = {
    fk_course_members_course_id?: SortOrder
    fk_course_members_user_id?: SortOrder
    role?: SortOrder
    joined_at?: SortOrder
    _count?: course_membersCountOrderByAggregateInput
    _avg?: course_membersAvgOrderByAggregateInput
    _max?: course_membersMaxOrderByAggregateInput
    _min?: course_membersMinOrderByAggregateInput
    _sum?: course_membersSumOrderByAggregateInput
  }

  export type course_membersScalarWhereWithAggregatesInput = {
    AND?: course_membersScalarWhereWithAggregatesInput | course_membersScalarWhereWithAggregatesInput[]
    OR?: course_membersScalarWhereWithAggregatesInput[]
    NOT?: course_membersScalarWhereWithAggregatesInput | course_membersScalarWhereWithAggregatesInput[]
    fk_course_members_course_id?: IntWithAggregatesFilter<"course_members"> | number
    fk_course_members_user_id?: IntWithAggregatesFilter<"course_members"> | number
    role?: Enumcourse_members_roleWithAggregatesFilter<"course_members"> | $Enums.course_members_role
    joined_at?: DateTimeWithAggregatesFilter<"course_members"> | Date | string
  }

  export type coursesWhereInput = {
    AND?: coursesWhereInput | coursesWhereInput[]
    OR?: coursesWhereInput[]
    NOT?: coursesWhereInput | coursesWhereInput[]
    course_id?: IntFilter<"courses"> | number
    name?: StringFilter<"courses"> | string
    description?: StringNullableFilter<"courses"> | string | null
    code?: StringFilter<"courses"> | string
    fk_courses_teacher_id?: IntFilter<"courses"> | number
    created_at?: DateTimeFilter<"courses"> | Date | string
    course_img?: StringNullableFilter<"courses"> | string | null
    deleted_at?: DateTimeNullableFilter<"courses"> | Date | string | null
    assignments?: AssignmentsListRelationFilter
    attendance?: AttendanceListRelationFilter
    course_members?: Course_membersListRelationFilter
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type coursesOrderByWithRelationInput = {
    course_id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    code?: SortOrder
    fk_courses_teacher_id?: SortOrder
    created_at?: SortOrder
    course_img?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    assignments?: assignmentsOrderByRelationAggregateInput
    attendance?: attendanceOrderByRelationAggregateInput
    course_members?: course_membersOrderByRelationAggregateInput
    users?: usersOrderByWithRelationInput
    _relevance?: coursesOrderByRelevanceInput
  }

  export type coursesWhereUniqueInput = Prisma.AtLeast<{
    course_id?: number
    code?: string
    AND?: coursesWhereInput | coursesWhereInput[]
    OR?: coursesWhereInput[]
    NOT?: coursesWhereInput | coursesWhereInput[]
    name?: StringFilter<"courses"> | string
    description?: StringNullableFilter<"courses"> | string | null
    fk_courses_teacher_id?: IntFilter<"courses"> | number
    created_at?: DateTimeFilter<"courses"> | Date | string
    course_img?: StringNullableFilter<"courses"> | string | null
    deleted_at?: DateTimeNullableFilter<"courses"> | Date | string | null
    assignments?: AssignmentsListRelationFilter
    attendance?: AttendanceListRelationFilter
    course_members?: Course_membersListRelationFilter
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "course_id" | "code">

  export type coursesOrderByWithAggregationInput = {
    course_id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    code?: SortOrder
    fk_courses_teacher_id?: SortOrder
    created_at?: SortOrder
    course_img?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    _count?: coursesCountOrderByAggregateInput
    _avg?: coursesAvgOrderByAggregateInput
    _max?: coursesMaxOrderByAggregateInput
    _min?: coursesMinOrderByAggregateInput
    _sum?: coursesSumOrderByAggregateInput
  }

  export type coursesScalarWhereWithAggregatesInput = {
    AND?: coursesScalarWhereWithAggregatesInput | coursesScalarWhereWithAggregatesInput[]
    OR?: coursesScalarWhereWithAggregatesInput[]
    NOT?: coursesScalarWhereWithAggregatesInput | coursesScalarWhereWithAggregatesInput[]
    course_id?: IntWithAggregatesFilter<"courses"> | number
    name?: StringWithAggregatesFilter<"courses"> | string
    description?: StringNullableWithAggregatesFilter<"courses"> | string | null
    code?: StringWithAggregatesFilter<"courses"> | string
    fk_courses_teacher_id?: IntWithAggregatesFilter<"courses"> | number
    created_at?: DateTimeWithAggregatesFilter<"courses"> | Date | string
    course_img?: StringNullableWithAggregatesFilter<"courses"> | string | null
    deleted_at?: DateTimeNullableWithAggregatesFilter<"courses"> | Date | string | null
  }

  export type gradesWhereInput = {
    AND?: gradesWhereInput | gradesWhereInput[]
    OR?: gradesWhereInput[]
    NOT?: gradesWhereInput | gradesWhereInput[]
    grades_id?: IntFilter<"grades"> | number
    fk_grades_submission_id?: IntNullableFilter<"grades"> | number | null
    fk_grades_teacher_id?: IntNullableFilter<"grades"> | number | null
    score?: DecimalNullableFilter<"grades"> | Decimal | DecimalJsLike | number | string | null
    feedback?: StringNullableFilter<"grades"> | string | null
    graded_at?: DateTimeFilter<"grades"> | Date | string
    submissions?: XOR<SubmissionsNullableScalarRelationFilter, submissionsWhereInput> | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type gradesOrderByWithRelationInput = {
    grades_id?: SortOrder
    fk_grades_submission_id?: SortOrderInput | SortOrder
    fk_grades_teacher_id?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    graded_at?: SortOrder
    submissions?: submissionsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
    _relevance?: gradesOrderByRelevanceInput
  }

  export type gradesWhereUniqueInput = Prisma.AtLeast<{
    grades_id?: number
    AND?: gradesWhereInput | gradesWhereInput[]
    OR?: gradesWhereInput[]
    NOT?: gradesWhereInput | gradesWhereInput[]
    fk_grades_submission_id?: IntNullableFilter<"grades"> | number | null
    fk_grades_teacher_id?: IntNullableFilter<"grades"> | number | null
    score?: DecimalNullableFilter<"grades"> | Decimal | DecimalJsLike | number | string | null
    feedback?: StringNullableFilter<"grades"> | string | null
    graded_at?: DateTimeFilter<"grades"> | Date | string
    submissions?: XOR<SubmissionsNullableScalarRelationFilter, submissionsWhereInput> | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "grades_id">

  export type gradesOrderByWithAggregationInput = {
    grades_id?: SortOrder
    fk_grades_submission_id?: SortOrderInput | SortOrder
    fk_grades_teacher_id?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    graded_at?: SortOrder
    _count?: gradesCountOrderByAggregateInput
    _avg?: gradesAvgOrderByAggregateInput
    _max?: gradesMaxOrderByAggregateInput
    _min?: gradesMinOrderByAggregateInput
    _sum?: gradesSumOrderByAggregateInput
  }

  export type gradesScalarWhereWithAggregatesInput = {
    AND?: gradesScalarWhereWithAggregatesInput | gradesScalarWhereWithAggregatesInput[]
    OR?: gradesScalarWhereWithAggregatesInput[]
    NOT?: gradesScalarWhereWithAggregatesInput | gradesScalarWhereWithAggregatesInput[]
    grades_id?: IntWithAggregatesFilter<"grades"> | number
    fk_grades_submission_id?: IntNullableWithAggregatesFilter<"grades"> | number | null
    fk_grades_teacher_id?: IntNullableWithAggregatesFilter<"grades"> | number | null
    score?: DecimalNullableWithAggregatesFilter<"grades"> | Decimal | DecimalJsLike | number | string | null
    feedback?: StringNullableWithAggregatesFilter<"grades"> | string | null
    graded_at?: DateTimeWithAggregatesFilter<"grades"> | Date | string
  }

  export type submissionsWhereInput = {
    AND?: submissionsWhereInput | submissionsWhereInput[]
    OR?: submissionsWhereInput[]
    NOT?: submissionsWhereInput | submissionsWhereInput[]
    submission_id?: IntFilter<"submissions"> | number
    fk_submissions_assignment_id?: IntFilter<"submissions"> | number
    fk_submissions_student_id?: IntNullableFilter<"submissions"> | number | null
    file_url?: StringFilter<"submissions"> | string
    submitted_at?: DateTimeFilter<"submissions"> | Date | string
    grades?: GradesListRelationFilter
    assignments?: XOR<AssignmentsScalarRelationFilter, assignmentsWhereInput>
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type submissionsOrderByWithRelationInput = {
    submission_id?: SortOrder
    fk_submissions_assignment_id?: SortOrder
    fk_submissions_student_id?: SortOrderInput | SortOrder
    file_url?: SortOrder
    submitted_at?: SortOrder
    grades?: gradesOrderByRelationAggregateInput
    assignments?: assignmentsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
    _relevance?: submissionsOrderByRelevanceInput
  }

  export type submissionsWhereUniqueInput = Prisma.AtLeast<{
    submission_id?: number
    AND?: submissionsWhereInput | submissionsWhereInput[]
    OR?: submissionsWhereInput[]
    NOT?: submissionsWhereInput | submissionsWhereInput[]
    fk_submissions_assignment_id?: IntFilter<"submissions"> | number
    fk_submissions_student_id?: IntNullableFilter<"submissions"> | number | null
    file_url?: StringFilter<"submissions"> | string
    submitted_at?: DateTimeFilter<"submissions"> | Date | string
    grades?: GradesListRelationFilter
    assignments?: XOR<AssignmentsScalarRelationFilter, assignmentsWhereInput>
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "submission_id">

  export type submissionsOrderByWithAggregationInput = {
    submission_id?: SortOrder
    fk_submissions_assignment_id?: SortOrder
    fk_submissions_student_id?: SortOrderInput | SortOrder
    file_url?: SortOrder
    submitted_at?: SortOrder
    _count?: submissionsCountOrderByAggregateInput
    _avg?: submissionsAvgOrderByAggregateInput
    _max?: submissionsMaxOrderByAggregateInput
    _min?: submissionsMinOrderByAggregateInput
    _sum?: submissionsSumOrderByAggregateInput
  }

  export type submissionsScalarWhereWithAggregatesInput = {
    AND?: submissionsScalarWhereWithAggregatesInput | submissionsScalarWhereWithAggregatesInput[]
    OR?: submissionsScalarWhereWithAggregatesInput[]
    NOT?: submissionsScalarWhereWithAggregatesInput | submissionsScalarWhereWithAggregatesInput[]
    submission_id?: IntWithAggregatesFilter<"submissions"> | number
    fk_submissions_assignment_id?: IntWithAggregatesFilter<"submissions"> | number
    fk_submissions_student_id?: IntNullableWithAggregatesFilter<"submissions"> | number | null
    file_url?: StringWithAggregatesFilter<"submissions"> | string
    submitted_at?: DateTimeWithAggregatesFilter<"submissions"> | Date | string
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    user_id?: IntFilter<"users"> | number
    name?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    role?: Enumusers_roleFilter<"users"> | $Enums.users_role
    created_at?: DateTimeFilter<"users"> | Date | string
    profile_picture?: StringNullableFilter<"users"> | string | null
    deleted_at?: DateTimeNullableFilter<"users"> | Date | string | null
    attendance?: AttendanceListRelationFilter
    course_members?: Course_membersListRelationFilter
    courses?: CoursesListRelationFilter
    grades?: GradesListRelationFilter
    submissions?: SubmissionsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    profile_picture?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    attendance?: attendanceOrderByRelationAggregateInput
    course_members?: course_membersOrderByRelationAggregateInput
    courses?: coursesOrderByRelationAggregateInput
    grades?: gradesOrderByRelationAggregateInput
    submissions?: submissionsOrderByRelationAggregateInput
    _relevance?: usersOrderByRelevanceInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    name?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    role?: Enumusers_roleFilter<"users"> | $Enums.users_role
    created_at?: DateTimeFilter<"users"> | Date | string
    profile_picture?: StringNullableFilter<"users"> | string | null
    deleted_at?: DateTimeNullableFilter<"users"> | Date | string | null
    attendance?: AttendanceListRelationFilter
    course_members?: Course_membersListRelationFilter
    courses?: CoursesListRelationFilter
    grades?: GradesListRelationFilter
    submissions?: SubmissionsListRelationFilter
  }, "user_id" | "email">

  export type usersOrderByWithAggregationInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    profile_picture?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"users"> | number
    name?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    role?: Enumusers_roleWithAggregatesFilter<"users"> | $Enums.users_role
    created_at?: DateTimeWithAggregatesFilter<"users"> | Date | string
    profile_picture?: StringNullableWithAggregatesFilter<"users"> | string | null
    deleted_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
  }

  export type assignmentsCreateInput = {
    title: string
    description: string
    deadline: Date | string
    file_url?: string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
    courses: coursesCreateNestedOneWithoutAssignmentsInput
    submissions?: submissionsCreateNestedManyWithoutAssignmentsInput
  }

  export type assignmentsUncheckedCreateInput = {
    assignment_id?: number
    fk_assignments_course_id: number
    title: string
    description: string
    deadline: Date | string
    file_url?: string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
    submissions?: submissionsUncheckedCreateNestedManyWithoutAssignmentsInput
  }

  export type assignmentsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    file_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: coursesUpdateOneRequiredWithoutAssignmentsNestedInput
    submissions?: submissionsUpdateManyWithoutAssignmentsNestedInput
  }

  export type assignmentsUncheckedUpdateInput = {
    assignment_id?: IntFieldUpdateOperationsInput | number
    fk_assignments_course_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    file_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissions?: submissionsUncheckedUpdateManyWithoutAssignmentsNestedInput
  }

  export type assignmentsCreateManyInput = {
    assignment_id?: number
    fk_assignments_course_id: number
    title: string
    description: string
    deadline: Date | string
    file_url?: string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
  }

  export type assignmentsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    file_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type assignmentsUncheckedUpdateManyInput = {
    assignment_id?: IntFieldUpdateOperationsInput | number
    fk_assignments_course_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    file_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type attendanceCreateInput = {
    status: $Enums.attendance_status
    date: Date | string
    deleted_at?: Date | string | null
    courses: coursesCreateNestedOneWithoutAttendanceInput
    users: usersCreateNestedOneWithoutAttendanceInput
  }

  export type attendanceUncheckedCreateInput = {
    attendance_id?: number
    fk_attendances_course_id: number
    fk_attendances_student_id: number
    status: $Enums.attendance_status
    date: Date | string
    deleted_at?: Date | string | null
  }

  export type attendanceUpdateInput = {
    status?: Enumattendance_statusFieldUpdateOperationsInput | $Enums.attendance_status
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: coursesUpdateOneRequiredWithoutAttendanceNestedInput
    users?: usersUpdateOneRequiredWithoutAttendanceNestedInput
  }

  export type attendanceUncheckedUpdateInput = {
    attendance_id?: IntFieldUpdateOperationsInput | number
    fk_attendances_course_id?: IntFieldUpdateOperationsInput | number
    fk_attendances_student_id?: IntFieldUpdateOperationsInput | number
    status?: Enumattendance_statusFieldUpdateOperationsInput | $Enums.attendance_status
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type attendanceCreateManyInput = {
    attendance_id?: number
    fk_attendances_course_id: number
    fk_attendances_student_id: number
    status: $Enums.attendance_status
    date: Date | string
    deleted_at?: Date | string | null
  }

  export type attendanceUpdateManyMutationInput = {
    status?: Enumattendance_statusFieldUpdateOperationsInput | $Enums.attendance_status
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type attendanceUncheckedUpdateManyInput = {
    attendance_id?: IntFieldUpdateOperationsInput | number
    fk_attendances_course_id?: IntFieldUpdateOperationsInput | number
    fk_attendances_student_id?: IntFieldUpdateOperationsInput | number
    status?: Enumattendance_statusFieldUpdateOperationsInput | $Enums.attendance_status
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type course_membersCreateInput = {
    role: $Enums.course_members_role
    joined_at?: Date | string
    courses: coursesCreateNestedOneWithoutCourse_membersInput
    users: usersCreateNestedOneWithoutCourse_membersInput
  }

  export type course_membersUncheckedCreateInput = {
    fk_course_members_course_id: number
    fk_course_members_user_id: number
    role: $Enums.course_members_role
    joined_at?: Date | string
  }

  export type course_membersUpdateInput = {
    role?: Enumcourse_members_roleFieldUpdateOperationsInput | $Enums.course_members_role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: coursesUpdateOneRequiredWithoutCourse_membersNestedInput
    users?: usersUpdateOneRequiredWithoutCourse_membersNestedInput
  }

  export type course_membersUncheckedUpdateInput = {
    fk_course_members_course_id?: IntFieldUpdateOperationsInput | number
    fk_course_members_user_id?: IntFieldUpdateOperationsInput | number
    role?: Enumcourse_members_roleFieldUpdateOperationsInput | $Enums.course_members_role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type course_membersCreateManyInput = {
    fk_course_members_course_id: number
    fk_course_members_user_id: number
    role: $Enums.course_members_role
    joined_at?: Date | string
  }

  export type course_membersUpdateManyMutationInput = {
    role?: Enumcourse_members_roleFieldUpdateOperationsInput | $Enums.course_members_role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type course_membersUncheckedUpdateManyInput = {
    fk_course_members_course_id?: IntFieldUpdateOperationsInput | number
    fk_course_members_user_id?: IntFieldUpdateOperationsInput | number
    role?: Enumcourse_members_roleFieldUpdateOperationsInput | $Enums.course_members_role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type coursesCreateInput = {
    name: string
    description?: string | null
    code: string
    created_at?: Date | string
    course_img?: string | null
    deleted_at?: Date | string | null
    assignments?: assignmentsCreateNestedManyWithoutCoursesInput
    attendance?: attendanceCreateNestedManyWithoutCoursesInput
    course_members?: course_membersCreateNestedManyWithoutCoursesInput
    users: usersCreateNestedOneWithoutCoursesInput
  }

  export type coursesUncheckedCreateInput = {
    course_id?: number
    name: string
    description?: string | null
    code: string
    fk_courses_teacher_id: number
    created_at?: Date | string
    course_img?: string | null
    deleted_at?: Date | string | null
    assignments?: assignmentsUncheckedCreateNestedManyWithoutCoursesInput
    attendance?: attendanceUncheckedCreateNestedManyWithoutCoursesInput
    course_members?: course_membersUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type coursesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course_img?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: assignmentsUpdateManyWithoutCoursesNestedInput
    attendance?: attendanceUpdateManyWithoutCoursesNestedInput
    course_members?: course_membersUpdateManyWithoutCoursesNestedInput
    users?: usersUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    fk_courses_teacher_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course_img?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: assignmentsUncheckedUpdateManyWithoutCoursesNestedInput
    attendance?: attendanceUncheckedUpdateManyWithoutCoursesNestedInput
    course_members?: course_membersUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type coursesCreateManyInput = {
    course_id?: number
    name: string
    description?: string | null
    code: string
    fk_courses_teacher_id: number
    created_at?: Date | string
    course_img?: string | null
    deleted_at?: Date | string | null
  }

  export type coursesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course_img?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type coursesUncheckedUpdateManyInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    fk_courses_teacher_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course_img?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type gradesCreateInput = {
    score?: Decimal | DecimalJsLike | number | string | null
    feedback?: string | null
    graded_at?: Date | string
    submissions?: submissionsCreateNestedOneWithoutGradesInput
    users?: usersCreateNestedOneWithoutGradesInput
  }

  export type gradesUncheckedCreateInput = {
    grades_id?: number
    fk_grades_submission_id?: number | null
    fk_grades_teacher_id?: number | null
    score?: Decimal | DecimalJsLike | number | string | null
    feedback?: string | null
    graded_at?: Date | string
  }

  export type gradesUpdateInput = {
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    graded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: submissionsUpdateOneWithoutGradesNestedInput
    users?: usersUpdateOneWithoutGradesNestedInput
  }

  export type gradesUncheckedUpdateInput = {
    grades_id?: IntFieldUpdateOperationsInput | number
    fk_grades_submission_id?: NullableIntFieldUpdateOperationsInput | number | null
    fk_grades_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    graded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type gradesCreateManyInput = {
    grades_id?: number
    fk_grades_submission_id?: number | null
    fk_grades_teacher_id?: number | null
    score?: Decimal | DecimalJsLike | number | string | null
    feedback?: string | null
    graded_at?: Date | string
  }

  export type gradesUpdateManyMutationInput = {
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    graded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type gradesUncheckedUpdateManyInput = {
    grades_id?: IntFieldUpdateOperationsInput | number
    fk_grades_submission_id?: NullableIntFieldUpdateOperationsInput | number | null
    fk_grades_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    graded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type submissionsCreateInput = {
    file_url: string
    submitted_at?: Date | string
    grades?: gradesCreateNestedManyWithoutSubmissionsInput
    assignments: assignmentsCreateNestedOneWithoutSubmissionsInput
    users?: usersCreateNestedOneWithoutSubmissionsInput
  }

  export type submissionsUncheckedCreateInput = {
    submission_id?: number
    fk_submissions_assignment_id: number
    fk_submissions_student_id?: number | null
    file_url: string
    submitted_at?: Date | string
    grades?: gradesUncheckedCreateNestedManyWithoutSubmissionsInput
  }

  export type submissionsUpdateInput = {
    file_url?: StringFieldUpdateOperationsInput | string
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    grades?: gradesUpdateManyWithoutSubmissionsNestedInput
    assignments?: assignmentsUpdateOneRequiredWithoutSubmissionsNestedInput
    users?: usersUpdateOneWithoutSubmissionsNestedInput
  }

  export type submissionsUncheckedUpdateInput = {
    submission_id?: IntFieldUpdateOperationsInput | number
    fk_submissions_assignment_id?: IntFieldUpdateOperationsInput | number
    fk_submissions_student_id?: NullableIntFieldUpdateOperationsInput | number | null
    file_url?: StringFieldUpdateOperationsInput | string
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    grades?: gradesUncheckedUpdateManyWithoutSubmissionsNestedInput
  }

  export type submissionsCreateManyInput = {
    submission_id?: number
    fk_submissions_assignment_id: number
    fk_submissions_student_id?: number | null
    file_url: string
    submitted_at?: Date | string
  }

  export type submissionsUpdateManyMutationInput = {
    file_url?: StringFieldUpdateOperationsInput | string
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type submissionsUncheckedUpdateManyInput = {
    submission_id?: IntFieldUpdateOperationsInput | number
    fk_submissions_assignment_id?: IntFieldUpdateOperationsInput | number
    fk_submissions_student_id?: NullableIntFieldUpdateOperationsInput | number | null
    file_url?: StringFieldUpdateOperationsInput | string
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateInput = {
    name: string
    email: string
    password: string
    role: $Enums.users_role
    created_at?: Date | string
    profile_picture?: string | null
    deleted_at?: Date | string | null
    attendance?: attendanceCreateNestedManyWithoutUsersInput
    course_members?: course_membersCreateNestedManyWithoutUsersInput
    courses?: coursesCreateNestedManyWithoutUsersInput
    grades?: gradesCreateNestedManyWithoutUsersInput
    submissions?: submissionsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    user_id?: number
    name: string
    email: string
    password: string
    role: $Enums.users_role
    created_at?: Date | string
    profile_picture?: string | null
    deleted_at?: Date | string | null
    attendance?: attendanceUncheckedCreateNestedManyWithoutUsersInput
    course_members?: course_membersUncheckedCreateNestedManyWithoutUsersInput
    courses?: coursesUncheckedCreateNestedManyWithoutUsersInput
    grades?: gradesUncheckedCreateNestedManyWithoutUsersInput
    submissions?: submissionsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendance?: attendanceUpdateManyWithoutUsersNestedInput
    course_members?: course_membersUpdateManyWithoutUsersNestedInput
    courses?: coursesUpdateManyWithoutUsersNestedInput
    grades?: gradesUpdateManyWithoutUsersNestedInput
    submissions?: submissionsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendance?: attendanceUncheckedUpdateManyWithoutUsersNestedInput
    course_members?: course_membersUncheckedUpdateManyWithoutUsersNestedInput
    courses?: coursesUncheckedUpdateManyWithoutUsersNestedInput
    grades?: gradesUncheckedUpdateManyWithoutUsersNestedInput
    submissions?: submissionsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    user_id?: number
    name: string
    email: string
    password: string
    role: $Enums.users_role
    created_at?: Date | string
    profile_picture?: string | null
    deleted_at?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CoursesScalarRelationFilter = {
    is?: coursesWhereInput
    isNot?: coursesWhereInput
  }

  export type SubmissionsListRelationFilter = {
    every?: submissionsWhereInput
    some?: submissionsWhereInput
    none?: submissionsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type submissionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type assignmentsOrderByRelevanceInput = {
    fields: assignmentsOrderByRelevanceFieldEnum | assignmentsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type assignmentsCountOrderByAggregateInput = {
    assignment_id?: SortOrder
    fk_assignments_course_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    file_url?: SortOrder
    created_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type assignmentsAvgOrderByAggregateInput = {
    assignment_id?: SortOrder
    fk_assignments_course_id?: SortOrder
  }

  export type assignmentsMaxOrderByAggregateInput = {
    assignment_id?: SortOrder
    fk_assignments_course_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    file_url?: SortOrder
    created_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type assignmentsMinOrderByAggregateInput = {
    assignment_id?: SortOrder
    fk_assignments_course_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    file_url?: SortOrder
    created_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type assignmentsSumOrderByAggregateInput = {
    assignment_id?: SortOrder
    fk_assignments_course_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type Enumattendance_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.attendance_status | Enumattendance_statusFieldRefInput<$PrismaModel>
    in?: $Enums.attendance_status[]
    notIn?: $Enums.attendance_status[]
    not?: NestedEnumattendance_statusFilter<$PrismaModel> | $Enums.attendance_status
  }

  export type UsersScalarRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type attendanceCountOrderByAggregateInput = {
    attendance_id?: SortOrder
    fk_attendances_course_id?: SortOrder
    fk_attendances_student_id?: SortOrder
    status?: SortOrder
    date?: SortOrder
    deleted_at?: SortOrder
  }

  export type attendanceAvgOrderByAggregateInput = {
    attendance_id?: SortOrder
    fk_attendances_course_id?: SortOrder
    fk_attendances_student_id?: SortOrder
  }

  export type attendanceMaxOrderByAggregateInput = {
    attendance_id?: SortOrder
    fk_attendances_course_id?: SortOrder
    fk_attendances_student_id?: SortOrder
    status?: SortOrder
    date?: SortOrder
    deleted_at?: SortOrder
  }

  export type attendanceMinOrderByAggregateInput = {
    attendance_id?: SortOrder
    fk_attendances_course_id?: SortOrder
    fk_attendances_student_id?: SortOrder
    status?: SortOrder
    date?: SortOrder
    deleted_at?: SortOrder
  }

  export type attendanceSumOrderByAggregateInput = {
    attendance_id?: SortOrder
    fk_attendances_course_id?: SortOrder
    fk_attendances_student_id?: SortOrder
  }

  export type Enumattendance_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.attendance_status | Enumattendance_statusFieldRefInput<$PrismaModel>
    in?: $Enums.attendance_status[]
    notIn?: $Enums.attendance_status[]
    not?: NestedEnumattendance_statusWithAggregatesFilter<$PrismaModel> | $Enums.attendance_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumattendance_statusFilter<$PrismaModel>
    _max?: NestedEnumattendance_statusFilter<$PrismaModel>
  }

  export type Enumcourse_members_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.course_members_role | Enumcourse_members_roleFieldRefInput<$PrismaModel>
    in?: $Enums.course_members_role[]
    notIn?: $Enums.course_members_role[]
    not?: NestedEnumcourse_members_roleFilter<$PrismaModel> | $Enums.course_members_role
  }

  export type course_membersFk_course_members_course_idFk_course_members_user_idCompoundUniqueInput = {
    fk_course_members_course_id: number
    fk_course_members_user_id: number
  }

  export type course_membersCountOrderByAggregateInput = {
    fk_course_members_course_id?: SortOrder
    fk_course_members_user_id?: SortOrder
    role?: SortOrder
    joined_at?: SortOrder
  }

  export type course_membersAvgOrderByAggregateInput = {
    fk_course_members_course_id?: SortOrder
    fk_course_members_user_id?: SortOrder
  }

  export type course_membersMaxOrderByAggregateInput = {
    fk_course_members_course_id?: SortOrder
    fk_course_members_user_id?: SortOrder
    role?: SortOrder
    joined_at?: SortOrder
  }

  export type course_membersMinOrderByAggregateInput = {
    fk_course_members_course_id?: SortOrder
    fk_course_members_user_id?: SortOrder
    role?: SortOrder
    joined_at?: SortOrder
  }

  export type course_membersSumOrderByAggregateInput = {
    fk_course_members_course_id?: SortOrder
    fk_course_members_user_id?: SortOrder
  }

  export type Enumcourse_members_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.course_members_role | Enumcourse_members_roleFieldRefInput<$PrismaModel>
    in?: $Enums.course_members_role[]
    notIn?: $Enums.course_members_role[]
    not?: NestedEnumcourse_members_roleWithAggregatesFilter<$PrismaModel> | $Enums.course_members_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcourse_members_roleFilter<$PrismaModel>
    _max?: NestedEnumcourse_members_roleFilter<$PrismaModel>
  }

  export type AssignmentsListRelationFilter = {
    every?: assignmentsWhereInput
    some?: assignmentsWhereInput
    none?: assignmentsWhereInput
  }

  export type AttendanceListRelationFilter = {
    every?: attendanceWhereInput
    some?: attendanceWhereInput
    none?: attendanceWhereInput
  }

  export type Course_membersListRelationFilter = {
    every?: course_membersWhereInput
    some?: course_membersWhereInput
    none?: course_membersWhereInput
  }

  export type assignmentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type attendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type course_membersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type coursesOrderByRelevanceInput = {
    fields: coursesOrderByRelevanceFieldEnum | coursesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type coursesCountOrderByAggregateInput = {
    course_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    fk_courses_teacher_id?: SortOrder
    created_at?: SortOrder
    course_img?: SortOrder
    deleted_at?: SortOrder
  }

  export type coursesAvgOrderByAggregateInput = {
    course_id?: SortOrder
    fk_courses_teacher_id?: SortOrder
  }

  export type coursesMaxOrderByAggregateInput = {
    course_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    fk_courses_teacher_id?: SortOrder
    created_at?: SortOrder
    course_img?: SortOrder
    deleted_at?: SortOrder
  }

  export type coursesMinOrderByAggregateInput = {
    course_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    fk_courses_teacher_id?: SortOrder
    created_at?: SortOrder
    course_img?: SortOrder
    deleted_at?: SortOrder
  }

  export type coursesSumOrderByAggregateInput = {
    course_id?: SortOrder
    fk_courses_teacher_id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type SubmissionsNullableScalarRelationFilter = {
    is?: submissionsWhereInput | null
    isNot?: submissionsWhereInput | null
  }

  export type UsersNullableScalarRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type gradesOrderByRelevanceInput = {
    fields: gradesOrderByRelevanceFieldEnum | gradesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type gradesCountOrderByAggregateInput = {
    grades_id?: SortOrder
    fk_grades_submission_id?: SortOrder
    fk_grades_teacher_id?: SortOrder
    score?: SortOrder
    feedback?: SortOrder
    graded_at?: SortOrder
  }

  export type gradesAvgOrderByAggregateInput = {
    grades_id?: SortOrder
    fk_grades_submission_id?: SortOrder
    fk_grades_teacher_id?: SortOrder
    score?: SortOrder
  }

  export type gradesMaxOrderByAggregateInput = {
    grades_id?: SortOrder
    fk_grades_submission_id?: SortOrder
    fk_grades_teacher_id?: SortOrder
    score?: SortOrder
    feedback?: SortOrder
    graded_at?: SortOrder
  }

  export type gradesMinOrderByAggregateInput = {
    grades_id?: SortOrder
    fk_grades_submission_id?: SortOrder
    fk_grades_teacher_id?: SortOrder
    score?: SortOrder
    feedback?: SortOrder
    graded_at?: SortOrder
  }

  export type gradesSumOrderByAggregateInput = {
    grades_id?: SortOrder
    fk_grades_submission_id?: SortOrder
    fk_grades_teacher_id?: SortOrder
    score?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type GradesListRelationFilter = {
    every?: gradesWhereInput
    some?: gradesWhereInput
    none?: gradesWhereInput
  }

  export type AssignmentsScalarRelationFilter = {
    is?: assignmentsWhereInput
    isNot?: assignmentsWhereInput
  }

  export type gradesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type submissionsOrderByRelevanceInput = {
    fields: submissionsOrderByRelevanceFieldEnum | submissionsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type submissionsCountOrderByAggregateInput = {
    submission_id?: SortOrder
    fk_submissions_assignment_id?: SortOrder
    fk_submissions_student_id?: SortOrder
    file_url?: SortOrder
    submitted_at?: SortOrder
  }

  export type submissionsAvgOrderByAggregateInput = {
    submission_id?: SortOrder
    fk_submissions_assignment_id?: SortOrder
    fk_submissions_student_id?: SortOrder
  }

  export type submissionsMaxOrderByAggregateInput = {
    submission_id?: SortOrder
    fk_submissions_assignment_id?: SortOrder
    fk_submissions_student_id?: SortOrder
    file_url?: SortOrder
    submitted_at?: SortOrder
  }

  export type submissionsMinOrderByAggregateInput = {
    submission_id?: SortOrder
    fk_submissions_assignment_id?: SortOrder
    fk_submissions_student_id?: SortOrder
    file_url?: SortOrder
    submitted_at?: SortOrder
  }

  export type submissionsSumOrderByAggregateInput = {
    submission_id?: SortOrder
    fk_submissions_assignment_id?: SortOrder
    fk_submissions_student_id?: SortOrder
  }

  export type Enumusers_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel>
    in?: $Enums.users_role[]
    notIn?: $Enums.users_role[]
    not?: NestedEnumusers_roleFilter<$PrismaModel> | $Enums.users_role
  }

  export type CoursesListRelationFilter = {
    every?: coursesWhereInput
    some?: coursesWhereInput
    none?: coursesWhereInput
  }

  export type coursesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersOrderByRelevanceInput = {
    fields: usersOrderByRelevanceFieldEnum | usersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type usersCountOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    profile_picture?: SortOrder
    deleted_at?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    profile_picture?: SortOrder
    deleted_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    profile_picture?: SortOrder
    deleted_at?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type Enumusers_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel>
    in?: $Enums.users_role[]
    notIn?: $Enums.users_role[]
    not?: NestedEnumusers_roleWithAggregatesFilter<$PrismaModel> | $Enums.users_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumusers_roleFilter<$PrismaModel>
    _max?: NestedEnumusers_roleFilter<$PrismaModel>
  }

  export type coursesCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<coursesCreateWithoutAssignmentsInput, coursesUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: coursesCreateOrConnectWithoutAssignmentsInput
    connect?: coursesWhereUniqueInput
  }

  export type submissionsCreateNestedManyWithoutAssignmentsInput = {
    create?: XOR<submissionsCreateWithoutAssignmentsInput, submissionsUncheckedCreateWithoutAssignmentsInput> | submissionsCreateWithoutAssignmentsInput[] | submissionsUncheckedCreateWithoutAssignmentsInput[]
    connectOrCreate?: submissionsCreateOrConnectWithoutAssignmentsInput | submissionsCreateOrConnectWithoutAssignmentsInput[]
    createMany?: submissionsCreateManyAssignmentsInputEnvelope
    connect?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
  }

  export type submissionsUncheckedCreateNestedManyWithoutAssignmentsInput = {
    create?: XOR<submissionsCreateWithoutAssignmentsInput, submissionsUncheckedCreateWithoutAssignmentsInput> | submissionsCreateWithoutAssignmentsInput[] | submissionsUncheckedCreateWithoutAssignmentsInput[]
    connectOrCreate?: submissionsCreateOrConnectWithoutAssignmentsInput | submissionsCreateOrConnectWithoutAssignmentsInput[]
    createMany?: submissionsCreateManyAssignmentsInputEnvelope
    connect?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type coursesUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<coursesCreateWithoutAssignmentsInput, coursesUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: coursesCreateOrConnectWithoutAssignmentsInput
    upsert?: coursesUpsertWithoutAssignmentsInput
    connect?: coursesWhereUniqueInput
    update?: XOR<XOR<coursesUpdateToOneWithWhereWithoutAssignmentsInput, coursesUpdateWithoutAssignmentsInput>, coursesUncheckedUpdateWithoutAssignmentsInput>
  }

  export type submissionsUpdateManyWithoutAssignmentsNestedInput = {
    create?: XOR<submissionsCreateWithoutAssignmentsInput, submissionsUncheckedCreateWithoutAssignmentsInput> | submissionsCreateWithoutAssignmentsInput[] | submissionsUncheckedCreateWithoutAssignmentsInput[]
    connectOrCreate?: submissionsCreateOrConnectWithoutAssignmentsInput | submissionsCreateOrConnectWithoutAssignmentsInput[]
    upsert?: submissionsUpsertWithWhereUniqueWithoutAssignmentsInput | submissionsUpsertWithWhereUniqueWithoutAssignmentsInput[]
    createMany?: submissionsCreateManyAssignmentsInputEnvelope
    set?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    disconnect?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    delete?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    connect?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    update?: submissionsUpdateWithWhereUniqueWithoutAssignmentsInput | submissionsUpdateWithWhereUniqueWithoutAssignmentsInput[]
    updateMany?: submissionsUpdateManyWithWhereWithoutAssignmentsInput | submissionsUpdateManyWithWhereWithoutAssignmentsInput[]
    deleteMany?: submissionsScalarWhereInput | submissionsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type submissionsUncheckedUpdateManyWithoutAssignmentsNestedInput = {
    create?: XOR<submissionsCreateWithoutAssignmentsInput, submissionsUncheckedCreateWithoutAssignmentsInput> | submissionsCreateWithoutAssignmentsInput[] | submissionsUncheckedCreateWithoutAssignmentsInput[]
    connectOrCreate?: submissionsCreateOrConnectWithoutAssignmentsInput | submissionsCreateOrConnectWithoutAssignmentsInput[]
    upsert?: submissionsUpsertWithWhereUniqueWithoutAssignmentsInput | submissionsUpsertWithWhereUniqueWithoutAssignmentsInput[]
    createMany?: submissionsCreateManyAssignmentsInputEnvelope
    set?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    disconnect?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    delete?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    connect?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    update?: submissionsUpdateWithWhereUniqueWithoutAssignmentsInput | submissionsUpdateWithWhereUniqueWithoutAssignmentsInput[]
    updateMany?: submissionsUpdateManyWithWhereWithoutAssignmentsInput | submissionsUpdateManyWithWhereWithoutAssignmentsInput[]
    deleteMany?: submissionsScalarWhereInput | submissionsScalarWhereInput[]
  }

  export type coursesCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<coursesCreateWithoutAttendanceInput, coursesUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: coursesCreateOrConnectWithoutAttendanceInput
    connect?: coursesWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<usersCreateWithoutAttendanceInput, usersUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: usersCreateOrConnectWithoutAttendanceInput
    connect?: usersWhereUniqueInput
  }

  export type Enumattendance_statusFieldUpdateOperationsInput = {
    set?: $Enums.attendance_status
  }

  export type coursesUpdateOneRequiredWithoutAttendanceNestedInput = {
    create?: XOR<coursesCreateWithoutAttendanceInput, coursesUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: coursesCreateOrConnectWithoutAttendanceInput
    upsert?: coursesUpsertWithoutAttendanceInput
    connect?: coursesWhereUniqueInput
    update?: XOR<XOR<coursesUpdateToOneWithWhereWithoutAttendanceInput, coursesUpdateWithoutAttendanceInput>, coursesUncheckedUpdateWithoutAttendanceInput>
  }

  export type usersUpdateOneRequiredWithoutAttendanceNestedInput = {
    create?: XOR<usersCreateWithoutAttendanceInput, usersUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: usersCreateOrConnectWithoutAttendanceInput
    upsert?: usersUpsertWithoutAttendanceInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutAttendanceInput, usersUpdateWithoutAttendanceInput>, usersUncheckedUpdateWithoutAttendanceInput>
  }

  export type coursesCreateNestedOneWithoutCourse_membersInput = {
    create?: XOR<coursesCreateWithoutCourse_membersInput, coursesUncheckedCreateWithoutCourse_membersInput>
    connectOrCreate?: coursesCreateOrConnectWithoutCourse_membersInput
    connect?: coursesWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutCourse_membersInput = {
    create?: XOR<usersCreateWithoutCourse_membersInput, usersUncheckedCreateWithoutCourse_membersInput>
    connectOrCreate?: usersCreateOrConnectWithoutCourse_membersInput
    connect?: usersWhereUniqueInput
  }

  export type Enumcourse_members_roleFieldUpdateOperationsInput = {
    set?: $Enums.course_members_role
  }

  export type coursesUpdateOneRequiredWithoutCourse_membersNestedInput = {
    create?: XOR<coursesCreateWithoutCourse_membersInput, coursesUncheckedCreateWithoutCourse_membersInput>
    connectOrCreate?: coursesCreateOrConnectWithoutCourse_membersInput
    upsert?: coursesUpsertWithoutCourse_membersInput
    connect?: coursesWhereUniqueInput
    update?: XOR<XOR<coursesUpdateToOneWithWhereWithoutCourse_membersInput, coursesUpdateWithoutCourse_membersInput>, coursesUncheckedUpdateWithoutCourse_membersInput>
  }

  export type usersUpdateOneRequiredWithoutCourse_membersNestedInput = {
    create?: XOR<usersCreateWithoutCourse_membersInput, usersUncheckedCreateWithoutCourse_membersInput>
    connectOrCreate?: usersCreateOrConnectWithoutCourse_membersInput
    upsert?: usersUpsertWithoutCourse_membersInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutCourse_membersInput, usersUpdateWithoutCourse_membersInput>, usersUncheckedUpdateWithoutCourse_membersInput>
  }

  export type assignmentsCreateNestedManyWithoutCoursesInput = {
    create?: XOR<assignmentsCreateWithoutCoursesInput, assignmentsUncheckedCreateWithoutCoursesInput> | assignmentsCreateWithoutCoursesInput[] | assignmentsUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutCoursesInput | assignmentsCreateOrConnectWithoutCoursesInput[]
    createMany?: assignmentsCreateManyCoursesInputEnvelope
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
  }

  export type attendanceCreateNestedManyWithoutCoursesInput = {
    create?: XOR<attendanceCreateWithoutCoursesInput, attendanceUncheckedCreateWithoutCoursesInput> | attendanceCreateWithoutCoursesInput[] | attendanceUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutCoursesInput | attendanceCreateOrConnectWithoutCoursesInput[]
    createMany?: attendanceCreateManyCoursesInputEnvelope
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
  }

  export type course_membersCreateNestedManyWithoutCoursesInput = {
    create?: XOR<course_membersCreateWithoutCoursesInput, course_membersUncheckedCreateWithoutCoursesInput> | course_membersCreateWithoutCoursesInput[] | course_membersUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: course_membersCreateOrConnectWithoutCoursesInput | course_membersCreateOrConnectWithoutCoursesInput[]
    createMany?: course_membersCreateManyCoursesInputEnvelope
    connect?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
  }

  export type usersCreateNestedOneWithoutCoursesInput = {
    create?: XOR<usersCreateWithoutCoursesInput, usersUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: usersCreateOrConnectWithoutCoursesInput
    connect?: usersWhereUniqueInput
  }

  export type assignmentsUncheckedCreateNestedManyWithoutCoursesInput = {
    create?: XOR<assignmentsCreateWithoutCoursesInput, assignmentsUncheckedCreateWithoutCoursesInput> | assignmentsCreateWithoutCoursesInput[] | assignmentsUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutCoursesInput | assignmentsCreateOrConnectWithoutCoursesInput[]
    createMany?: assignmentsCreateManyCoursesInputEnvelope
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
  }

  export type attendanceUncheckedCreateNestedManyWithoutCoursesInput = {
    create?: XOR<attendanceCreateWithoutCoursesInput, attendanceUncheckedCreateWithoutCoursesInput> | attendanceCreateWithoutCoursesInput[] | attendanceUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutCoursesInput | attendanceCreateOrConnectWithoutCoursesInput[]
    createMany?: attendanceCreateManyCoursesInputEnvelope
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
  }

  export type course_membersUncheckedCreateNestedManyWithoutCoursesInput = {
    create?: XOR<course_membersCreateWithoutCoursesInput, course_membersUncheckedCreateWithoutCoursesInput> | course_membersCreateWithoutCoursesInput[] | course_membersUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: course_membersCreateOrConnectWithoutCoursesInput | course_membersCreateOrConnectWithoutCoursesInput[]
    createMany?: course_membersCreateManyCoursesInputEnvelope
    connect?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
  }

  export type assignmentsUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<assignmentsCreateWithoutCoursesInput, assignmentsUncheckedCreateWithoutCoursesInput> | assignmentsCreateWithoutCoursesInput[] | assignmentsUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutCoursesInput | assignmentsCreateOrConnectWithoutCoursesInput[]
    upsert?: assignmentsUpsertWithWhereUniqueWithoutCoursesInput | assignmentsUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: assignmentsCreateManyCoursesInputEnvelope
    set?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    disconnect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    delete?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    update?: assignmentsUpdateWithWhereUniqueWithoutCoursesInput | assignmentsUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: assignmentsUpdateManyWithWhereWithoutCoursesInput | assignmentsUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: assignmentsScalarWhereInput | assignmentsScalarWhereInput[]
  }

  export type attendanceUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<attendanceCreateWithoutCoursesInput, attendanceUncheckedCreateWithoutCoursesInput> | attendanceCreateWithoutCoursesInput[] | attendanceUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutCoursesInput | attendanceCreateOrConnectWithoutCoursesInput[]
    upsert?: attendanceUpsertWithWhereUniqueWithoutCoursesInput | attendanceUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: attendanceCreateManyCoursesInputEnvelope
    set?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    disconnect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    delete?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    update?: attendanceUpdateWithWhereUniqueWithoutCoursesInput | attendanceUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: attendanceUpdateManyWithWhereWithoutCoursesInput | attendanceUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
  }

  export type course_membersUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<course_membersCreateWithoutCoursesInput, course_membersUncheckedCreateWithoutCoursesInput> | course_membersCreateWithoutCoursesInput[] | course_membersUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: course_membersCreateOrConnectWithoutCoursesInput | course_membersCreateOrConnectWithoutCoursesInput[]
    upsert?: course_membersUpsertWithWhereUniqueWithoutCoursesInput | course_membersUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: course_membersCreateManyCoursesInputEnvelope
    set?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    disconnect?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    delete?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    connect?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    update?: course_membersUpdateWithWhereUniqueWithoutCoursesInput | course_membersUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: course_membersUpdateManyWithWhereWithoutCoursesInput | course_membersUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: course_membersScalarWhereInput | course_membersScalarWhereInput[]
  }

  export type usersUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<usersCreateWithoutCoursesInput, usersUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: usersCreateOrConnectWithoutCoursesInput
    upsert?: usersUpsertWithoutCoursesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutCoursesInput, usersUpdateWithoutCoursesInput>, usersUncheckedUpdateWithoutCoursesInput>
  }

  export type assignmentsUncheckedUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<assignmentsCreateWithoutCoursesInput, assignmentsUncheckedCreateWithoutCoursesInput> | assignmentsCreateWithoutCoursesInput[] | assignmentsUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutCoursesInput | assignmentsCreateOrConnectWithoutCoursesInput[]
    upsert?: assignmentsUpsertWithWhereUniqueWithoutCoursesInput | assignmentsUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: assignmentsCreateManyCoursesInputEnvelope
    set?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    disconnect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    delete?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    update?: assignmentsUpdateWithWhereUniqueWithoutCoursesInput | assignmentsUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: assignmentsUpdateManyWithWhereWithoutCoursesInput | assignmentsUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: assignmentsScalarWhereInput | assignmentsScalarWhereInput[]
  }

  export type attendanceUncheckedUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<attendanceCreateWithoutCoursesInput, attendanceUncheckedCreateWithoutCoursesInput> | attendanceCreateWithoutCoursesInput[] | attendanceUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutCoursesInput | attendanceCreateOrConnectWithoutCoursesInput[]
    upsert?: attendanceUpsertWithWhereUniqueWithoutCoursesInput | attendanceUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: attendanceCreateManyCoursesInputEnvelope
    set?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    disconnect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    delete?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    update?: attendanceUpdateWithWhereUniqueWithoutCoursesInput | attendanceUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: attendanceUpdateManyWithWhereWithoutCoursesInput | attendanceUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
  }

  export type course_membersUncheckedUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<course_membersCreateWithoutCoursesInput, course_membersUncheckedCreateWithoutCoursesInput> | course_membersCreateWithoutCoursesInput[] | course_membersUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: course_membersCreateOrConnectWithoutCoursesInput | course_membersCreateOrConnectWithoutCoursesInput[]
    upsert?: course_membersUpsertWithWhereUniqueWithoutCoursesInput | course_membersUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: course_membersCreateManyCoursesInputEnvelope
    set?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    disconnect?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    delete?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    connect?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    update?: course_membersUpdateWithWhereUniqueWithoutCoursesInput | course_membersUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: course_membersUpdateManyWithWhereWithoutCoursesInput | course_membersUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: course_membersScalarWhereInput | course_membersScalarWhereInput[]
  }

  export type submissionsCreateNestedOneWithoutGradesInput = {
    create?: XOR<submissionsCreateWithoutGradesInput, submissionsUncheckedCreateWithoutGradesInput>
    connectOrCreate?: submissionsCreateOrConnectWithoutGradesInput
    connect?: submissionsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutGradesInput = {
    create?: XOR<usersCreateWithoutGradesInput, usersUncheckedCreateWithoutGradesInput>
    connectOrCreate?: usersCreateOrConnectWithoutGradesInput
    connect?: usersWhereUniqueInput
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type submissionsUpdateOneWithoutGradesNestedInput = {
    create?: XOR<submissionsCreateWithoutGradesInput, submissionsUncheckedCreateWithoutGradesInput>
    connectOrCreate?: submissionsCreateOrConnectWithoutGradesInput
    upsert?: submissionsUpsertWithoutGradesInput
    disconnect?: submissionsWhereInput | boolean
    delete?: submissionsWhereInput | boolean
    connect?: submissionsWhereUniqueInput
    update?: XOR<XOR<submissionsUpdateToOneWithWhereWithoutGradesInput, submissionsUpdateWithoutGradesInput>, submissionsUncheckedUpdateWithoutGradesInput>
  }

  export type usersUpdateOneWithoutGradesNestedInput = {
    create?: XOR<usersCreateWithoutGradesInput, usersUncheckedCreateWithoutGradesInput>
    connectOrCreate?: usersCreateOrConnectWithoutGradesInput
    upsert?: usersUpsertWithoutGradesInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutGradesInput, usersUpdateWithoutGradesInput>, usersUncheckedUpdateWithoutGradesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type gradesCreateNestedManyWithoutSubmissionsInput = {
    create?: XOR<gradesCreateWithoutSubmissionsInput, gradesUncheckedCreateWithoutSubmissionsInput> | gradesCreateWithoutSubmissionsInput[] | gradesUncheckedCreateWithoutSubmissionsInput[]
    connectOrCreate?: gradesCreateOrConnectWithoutSubmissionsInput | gradesCreateOrConnectWithoutSubmissionsInput[]
    createMany?: gradesCreateManySubmissionsInputEnvelope
    connect?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
  }

  export type assignmentsCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<assignmentsCreateWithoutSubmissionsInput, assignmentsUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: assignmentsCreateOrConnectWithoutSubmissionsInput
    connect?: assignmentsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<usersCreateWithoutSubmissionsInput, usersUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutSubmissionsInput
    connect?: usersWhereUniqueInput
  }

  export type gradesUncheckedCreateNestedManyWithoutSubmissionsInput = {
    create?: XOR<gradesCreateWithoutSubmissionsInput, gradesUncheckedCreateWithoutSubmissionsInput> | gradesCreateWithoutSubmissionsInput[] | gradesUncheckedCreateWithoutSubmissionsInput[]
    connectOrCreate?: gradesCreateOrConnectWithoutSubmissionsInput | gradesCreateOrConnectWithoutSubmissionsInput[]
    createMany?: gradesCreateManySubmissionsInputEnvelope
    connect?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
  }

  export type gradesUpdateManyWithoutSubmissionsNestedInput = {
    create?: XOR<gradesCreateWithoutSubmissionsInput, gradesUncheckedCreateWithoutSubmissionsInput> | gradesCreateWithoutSubmissionsInput[] | gradesUncheckedCreateWithoutSubmissionsInput[]
    connectOrCreate?: gradesCreateOrConnectWithoutSubmissionsInput | gradesCreateOrConnectWithoutSubmissionsInput[]
    upsert?: gradesUpsertWithWhereUniqueWithoutSubmissionsInput | gradesUpsertWithWhereUniqueWithoutSubmissionsInput[]
    createMany?: gradesCreateManySubmissionsInputEnvelope
    set?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    disconnect?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    delete?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    connect?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    update?: gradesUpdateWithWhereUniqueWithoutSubmissionsInput | gradesUpdateWithWhereUniqueWithoutSubmissionsInput[]
    updateMany?: gradesUpdateManyWithWhereWithoutSubmissionsInput | gradesUpdateManyWithWhereWithoutSubmissionsInput[]
    deleteMany?: gradesScalarWhereInput | gradesScalarWhereInput[]
  }

  export type assignmentsUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<assignmentsCreateWithoutSubmissionsInput, assignmentsUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: assignmentsCreateOrConnectWithoutSubmissionsInput
    upsert?: assignmentsUpsertWithoutSubmissionsInput
    connect?: assignmentsWhereUniqueInput
    update?: XOR<XOR<assignmentsUpdateToOneWithWhereWithoutSubmissionsInput, assignmentsUpdateWithoutSubmissionsInput>, assignmentsUncheckedUpdateWithoutSubmissionsInput>
  }

  export type usersUpdateOneWithoutSubmissionsNestedInput = {
    create?: XOR<usersCreateWithoutSubmissionsInput, usersUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutSubmissionsInput
    upsert?: usersUpsertWithoutSubmissionsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutSubmissionsInput, usersUpdateWithoutSubmissionsInput>, usersUncheckedUpdateWithoutSubmissionsInput>
  }

  export type gradesUncheckedUpdateManyWithoutSubmissionsNestedInput = {
    create?: XOR<gradesCreateWithoutSubmissionsInput, gradesUncheckedCreateWithoutSubmissionsInput> | gradesCreateWithoutSubmissionsInput[] | gradesUncheckedCreateWithoutSubmissionsInput[]
    connectOrCreate?: gradesCreateOrConnectWithoutSubmissionsInput | gradesCreateOrConnectWithoutSubmissionsInput[]
    upsert?: gradesUpsertWithWhereUniqueWithoutSubmissionsInput | gradesUpsertWithWhereUniqueWithoutSubmissionsInput[]
    createMany?: gradesCreateManySubmissionsInputEnvelope
    set?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    disconnect?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    delete?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    connect?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    update?: gradesUpdateWithWhereUniqueWithoutSubmissionsInput | gradesUpdateWithWhereUniqueWithoutSubmissionsInput[]
    updateMany?: gradesUpdateManyWithWhereWithoutSubmissionsInput | gradesUpdateManyWithWhereWithoutSubmissionsInput[]
    deleteMany?: gradesScalarWhereInput | gradesScalarWhereInput[]
  }

  export type attendanceCreateNestedManyWithoutUsersInput = {
    create?: XOR<attendanceCreateWithoutUsersInput, attendanceUncheckedCreateWithoutUsersInput> | attendanceCreateWithoutUsersInput[] | attendanceUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutUsersInput | attendanceCreateOrConnectWithoutUsersInput[]
    createMany?: attendanceCreateManyUsersInputEnvelope
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
  }

  export type course_membersCreateNestedManyWithoutUsersInput = {
    create?: XOR<course_membersCreateWithoutUsersInput, course_membersUncheckedCreateWithoutUsersInput> | course_membersCreateWithoutUsersInput[] | course_membersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: course_membersCreateOrConnectWithoutUsersInput | course_membersCreateOrConnectWithoutUsersInput[]
    createMany?: course_membersCreateManyUsersInputEnvelope
    connect?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
  }

  export type coursesCreateNestedManyWithoutUsersInput = {
    create?: XOR<coursesCreateWithoutUsersInput, coursesUncheckedCreateWithoutUsersInput> | coursesCreateWithoutUsersInput[] | coursesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: coursesCreateOrConnectWithoutUsersInput | coursesCreateOrConnectWithoutUsersInput[]
    createMany?: coursesCreateManyUsersInputEnvelope
    connect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
  }

  export type gradesCreateNestedManyWithoutUsersInput = {
    create?: XOR<gradesCreateWithoutUsersInput, gradesUncheckedCreateWithoutUsersInput> | gradesCreateWithoutUsersInput[] | gradesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: gradesCreateOrConnectWithoutUsersInput | gradesCreateOrConnectWithoutUsersInput[]
    createMany?: gradesCreateManyUsersInputEnvelope
    connect?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
  }

  export type submissionsCreateNestedManyWithoutUsersInput = {
    create?: XOR<submissionsCreateWithoutUsersInput, submissionsUncheckedCreateWithoutUsersInput> | submissionsCreateWithoutUsersInput[] | submissionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: submissionsCreateOrConnectWithoutUsersInput | submissionsCreateOrConnectWithoutUsersInput[]
    createMany?: submissionsCreateManyUsersInputEnvelope
    connect?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
  }

  export type attendanceUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<attendanceCreateWithoutUsersInput, attendanceUncheckedCreateWithoutUsersInput> | attendanceCreateWithoutUsersInput[] | attendanceUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutUsersInput | attendanceCreateOrConnectWithoutUsersInput[]
    createMany?: attendanceCreateManyUsersInputEnvelope
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
  }

  export type course_membersUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<course_membersCreateWithoutUsersInput, course_membersUncheckedCreateWithoutUsersInput> | course_membersCreateWithoutUsersInput[] | course_membersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: course_membersCreateOrConnectWithoutUsersInput | course_membersCreateOrConnectWithoutUsersInput[]
    createMany?: course_membersCreateManyUsersInputEnvelope
    connect?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
  }

  export type coursesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<coursesCreateWithoutUsersInput, coursesUncheckedCreateWithoutUsersInput> | coursesCreateWithoutUsersInput[] | coursesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: coursesCreateOrConnectWithoutUsersInput | coursesCreateOrConnectWithoutUsersInput[]
    createMany?: coursesCreateManyUsersInputEnvelope
    connect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
  }

  export type gradesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<gradesCreateWithoutUsersInput, gradesUncheckedCreateWithoutUsersInput> | gradesCreateWithoutUsersInput[] | gradesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: gradesCreateOrConnectWithoutUsersInput | gradesCreateOrConnectWithoutUsersInput[]
    createMany?: gradesCreateManyUsersInputEnvelope
    connect?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
  }

  export type submissionsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<submissionsCreateWithoutUsersInput, submissionsUncheckedCreateWithoutUsersInput> | submissionsCreateWithoutUsersInput[] | submissionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: submissionsCreateOrConnectWithoutUsersInput | submissionsCreateOrConnectWithoutUsersInput[]
    createMany?: submissionsCreateManyUsersInputEnvelope
    connect?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
  }

  export type Enumusers_roleFieldUpdateOperationsInput = {
    set?: $Enums.users_role
  }

  export type attendanceUpdateManyWithoutUsersNestedInput = {
    create?: XOR<attendanceCreateWithoutUsersInput, attendanceUncheckedCreateWithoutUsersInput> | attendanceCreateWithoutUsersInput[] | attendanceUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutUsersInput | attendanceCreateOrConnectWithoutUsersInput[]
    upsert?: attendanceUpsertWithWhereUniqueWithoutUsersInput | attendanceUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: attendanceCreateManyUsersInputEnvelope
    set?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    disconnect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    delete?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    update?: attendanceUpdateWithWhereUniqueWithoutUsersInput | attendanceUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: attendanceUpdateManyWithWhereWithoutUsersInput | attendanceUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
  }

  export type course_membersUpdateManyWithoutUsersNestedInput = {
    create?: XOR<course_membersCreateWithoutUsersInput, course_membersUncheckedCreateWithoutUsersInput> | course_membersCreateWithoutUsersInput[] | course_membersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: course_membersCreateOrConnectWithoutUsersInput | course_membersCreateOrConnectWithoutUsersInput[]
    upsert?: course_membersUpsertWithWhereUniqueWithoutUsersInput | course_membersUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: course_membersCreateManyUsersInputEnvelope
    set?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    disconnect?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    delete?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    connect?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    update?: course_membersUpdateWithWhereUniqueWithoutUsersInput | course_membersUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: course_membersUpdateManyWithWhereWithoutUsersInput | course_membersUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: course_membersScalarWhereInput | course_membersScalarWhereInput[]
  }

  export type coursesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<coursesCreateWithoutUsersInput, coursesUncheckedCreateWithoutUsersInput> | coursesCreateWithoutUsersInput[] | coursesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: coursesCreateOrConnectWithoutUsersInput | coursesCreateOrConnectWithoutUsersInput[]
    upsert?: coursesUpsertWithWhereUniqueWithoutUsersInput | coursesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: coursesCreateManyUsersInputEnvelope
    set?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    disconnect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    delete?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    connect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    update?: coursesUpdateWithWhereUniqueWithoutUsersInput | coursesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: coursesUpdateManyWithWhereWithoutUsersInput | coursesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: coursesScalarWhereInput | coursesScalarWhereInput[]
  }

  export type gradesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<gradesCreateWithoutUsersInput, gradesUncheckedCreateWithoutUsersInput> | gradesCreateWithoutUsersInput[] | gradesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: gradesCreateOrConnectWithoutUsersInput | gradesCreateOrConnectWithoutUsersInput[]
    upsert?: gradesUpsertWithWhereUniqueWithoutUsersInput | gradesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: gradesCreateManyUsersInputEnvelope
    set?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    disconnect?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    delete?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    connect?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    update?: gradesUpdateWithWhereUniqueWithoutUsersInput | gradesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: gradesUpdateManyWithWhereWithoutUsersInput | gradesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: gradesScalarWhereInput | gradesScalarWhereInput[]
  }

  export type submissionsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<submissionsCreateWithoutUsersInput, submissionsUncheckedCreateWithoutUsersInput> | submissionsCreateWithoutUsersInput[] | submissionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: submissionsCreateOrConnectWithoutUsersInput | submissionsCreateOrConnectWithoutUsersInput[]
    upsert?: submissionsUpsertWithWhereUniqueWithoutUsersInput | submissionsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: submissionsCreateManyUsersInputEnvelope
    set?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    disconnect?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    delete?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    connect?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    update?: submissionsUpdateWithWhereUniqueWithoutUsersInput | submissionsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: submissionsUpdateManyWithWhereWithoutUsersInput | submissionsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: submissionsScalarWhereInput | submissionsScalarWhereInput[]
  }

  export type attendanceUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<attendanceCreateWithoutUsersInput, attendanceUncheckedCreateWithoutUsersInput> | attendanceCreateWithoutUsersInput[] | attendanceUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutUsersInput | attendanceCreateOrConnectWithoutUsersInput[]
    upsert?: attendanceUpsertWithWhereUniqueWithoutUsersInput | attendanceUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: attendanceCreateManyUsersInputEnvelope
    set?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    disconnect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    delete?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    update?: attendanceUpdateWithWhereUniqueWithoutUsersInput | attendanceUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: attendanceUpdateManyWithWhereWithoutUsersInput | attendanceUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
  }

  export type course_membersUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<course_membersCreateWithoutUsersInput, course_membersUncheckedCreateWithoutUsersInput> | course_membersCreateWithoutUsersInput[] | course_membersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: course_membersCreateOrConnectWithoutUsersInput | course_membersCreateOrConnectWithoutUsersInput[]
    upsert?: course_membersUpsertWithWhereUniqueWithoutUsersInput | course_membersUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: course_membersCreateManyUsersInputEnvelope
    set?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    disconnect?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    delete?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    connect?: course_membersWhereUniqueInput | course_membersWhereUniqueInput[]
    update?: course_membersUpdateWithWhereUniqueWithoutUsersInput | course_membersUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: course_membersUpdateManyWithWhereWithoutUsersInput | course_membersUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: course_membersScalarWhereInput | course_membersScalarWhereInput[]
  }

  export type coursesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<coursesCreateWithoutUsersInput, coursesUncheckedCreateWithoutUsersInput> | coursesCreateWithoutUsersInput[] | coursesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: coursesCreateOrConnectWithoutUsersInput | coursesCreateOrConnectWithoutUsersInput[]
    upsert?: coursesUpsertWithWhereUniqueWithoutUsersInput | coursesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: coursesCreateManyUsersInputEnvelope
    set?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    disconnect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    delete?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    connect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    update?: coursesUpdateWithWhereUniqueWithoutUsersInput | coursesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: coursesUpdateManyWithWhereWithoutUsersInput | coursesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: coursesScalarWhereInput | coursesScalarWhereInput[]
  }

  export type gradesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<gradesCreateWithoutUsersInput, gradesUncheckedCreateWithoutUsersInput> | gradesCreateWithoutUsersInput[] | gradesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: gradesCreateOrConnectWithoutUsersInput | gradesCreateOrConnectWithoutUsersInput[]
    upsert?: gradesUpsertWithWhereUniqueWithoutUsersInput | gradesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: gradesCreateManyUsersInputEnvelope
    set?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    disconnect?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    delete?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    connect?: gradesWhereUniqueInput | gradesWhereUniqueInput[]
    update?: gradesUpdateWithWhereUniqueWithoutUsersInput | gradesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: gradesUpdateManyWithWhereWithoutUsersInput | gradesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: gradesScalarWhereInput | gradesScalarWhereInput[]
  }

  export type submissionsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<submissionsCreateWithoutUsersInput, submissionsUncheckedCreateWithoutUsersInput> | submissionsCreateWithoutUsersInput[] | submissionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: submissionsCreateOrConnectWithoutUsersInput | submissionsCreateOrConnectWithoutUsersInput[]
    upsert?: submissionsUpsertWithWhereUniqueWithoutUsersInput | submissionsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: submissionsCreateManyUsersInputEnvelope
    set?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    disconnect?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    delete?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    connect?: submissionsWhereUniqueInput | submissionsWhereUniqueInput[]
    update?: submissionsUpdateWithWhereUniqueWithoutUsersInput | submissionsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: submissionsUpdateManyWithWhereWithoutUsersInput | submissionsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: submissionsScalarWhereInput | submissionsScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumattendance_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.attendance_status | Enumattendance_statusFieldRefInput<$PrismaModel>
    in?: $Enums.attendance_status[]
    notIn?: $Enums.attendance_status[]
    not?: NestedEnumattendance_statusFilter<$PrismaModel> | $Enums.attendance_status
  }

  export type NestedEnumattendance_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.attendance_status | Enumattendance_statusFieldRefInput<$PrismaModel>
    in?: $Enums.attendance_status[]
    notIn?: $Enums.attendance_status[]
    not?: NestedEnumattendance_statusWithAggregatesFilter<$PrismaModel> | $Enums.attendance_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumattendance_statusFilter<$PrismaModel>
    _max?: NestedEnumattendance_statusFilter<$PrismaModel>
  }

  export type NestedEnumcourse_members_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.course_members_role | Enumcourse_members_roleFieldRefInput<$PrismaModel>
    in?: $Enums.course_members_role[]
    notIn?: $Enums.course_members_role[]
    not?: NestedEnumcourse_members_roleFilter<$PrismaModel> | $Enums.course_members_role
  }

  export type NestedEnumcourse_members_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.course_members_role | Enumcourse_members_roleFieldRefInput<$PrismaModel>
    in?: $Enums.course_members_role[]
    notIn?: $Enums.course_members_role[]
    not?: NestedEnumcourse_members_roleWithAggregatesFilter<$PrismaModel> | $Enums.course_members_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcourse_members_roleFilter<$PrismaModel>
    _max?: NestedEnumcourse_members_roleFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumusers_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel>
    in?: $Enums.users_role[]
    notIn?: $Enums.users_role[]
    not?: NestedEnumusers_roleFilter<$PrismaModel> | $Enums.users_role
  }

  export type NestedEnumusers_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel>
    in?: $Enums.users_role[]
    notIn?: $Enums.users_role[]
    not?: NestedEnumusers_roleWithAggregatesFilter<$PrismaModel> | $Enums.users_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumusers_roleFilter<$PrismaModel>
    _max?: NestedEnumusers_roleFilter<$PrismaModel>
  }

  export type coursesCreateWithoutAssignmentsInput = {
    name: string
    description?: string | null
    code: string
    created_at?: Date | string
    course_img?: string | null
    deleted_at?: Date | string | null
    attendance?: attendanceCreateNestedManyWithoutCoursesInput
    course_members?: course_membersCreateNestedManyWithoutCoursesInput
    users: usersCreateNestedOneWithoutCoursesInput
  }

  export type coursesUncheckedCreateWithoutAssignmentsInput = {
    course_id?: number
    name: string
    description?: string | null
    code: string
    fk_courses_teacher_id: number
    created_at?: Date | string
    course_img?: string | null
    deleted_at?: Date | string | null
    attendance?: attendanceUncheckedCreateNestedManyWithoutCoursesInput
    course_members?: course_membersUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type coursesCreateOrConnectWithoutAssignmentsInput = {
    where: coursesWhereUniqueInput
    create: XOR<coursesCreateWithoutAssignmentsInput, coursesUncheckedCreateWithoutAssignmentsInput>
  }

  export type submissionsCreateWithoutAssignmentsInput = {
    file_url: string
    submitted_at?: Date | string
    grades?: gradesCreateNestedManyWithoutSubmissionsInput
    users?: usersCreateNestedOneWithoutSubmissionsInput
  }

  export type submissionsUncheckedCreateWithoutAssignmentsInput = {
    submission_id?: number
    fk_submissions_student_id?: number | null
    file_url: string
    submitted_at?: Date | string
    grades?: gradesUncheckedCreateNestedManyWithoutSubmissionsInput
  }

  export type submissionsCreateOrConnectWithoutAssignmentsInput = {
    where: submissionsWhereUniqueInput
    create: XOR<submissionsCreateWithoutAssignmentsInput, submissionsUncheckedCreateWithoutAssignmentsInput>
  }

  export type submissionsCreateManyAssignmentsInputEnvelope = {
    data: submissionsCreateManyAssignmentsInput | submissionsCreateManyAssignmentsInput[]
    skipDuplicates?: boolean
  }

  export type coursesUpsertWithoutAssignmentsInput = {
    update: XOR<coursesUpdateWithoutAssignmentsInput, coursesUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<coursesCreateWithoutAssignmentsInput, coursesUncheckedCreateWithoutAssignmentsInput>
    where?: coursesWhereInput
  }

  export type coursesUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: coursesWhereInput
    data: XOR<coursesUpdateWithoutAssignmentsInput, coursesUncheckedUpdateWithoutAssignmentsInput>
  }

  export type coursesUpdateWithoutAssignmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course_img?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendance?: attendanceUpdateManyWithoutCoursesNestedInput
    course_members?: course_membersUpdateManyWithoutCoursesNestedInput
    users?: usersUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateWithoutAssignmentsInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    fk_courses_teacher_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course_img?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendance?: attendanceUncheckedUpdateManyWithoutCoursesNestedInput
    course_members?: course_membersUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type submissionsUpsertWithWhereUniqueWithoutAssignmentsInput = {
    where: submissionsWhereUniqueInput
    update: XOR<submissionsUpdateWithoutAssignmentsInput, submissionsUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<submissionsCreateWithoutAssignmentsInput, submissionsUncheckedCreateWithoutAssignmentsInput>
  }

  export type submissionsUpdateWithWhereUniqueWithoutAssignmentsInput = {
    where: submissionsWhereUniqueInput
    data: XOR<submissionsUpdateWithoutAssignmentsInput, submissionsUncheckedUpdateWithoutAssignmentsInput>
  }

  export type submissionsUpdateManyWithWhereWithoutAssignmentsInput = {
    where: submissionsScalarWhereInput
    data: XOR<submissionsUpdateManyMutationInput, submissionsUncheckedUpdateManyWithoutAssignmentsInput>
  }

  export type submissionsScalarWhereInput = {
    AND?: submissionsScalarWhereInput | submissionsScalarWhereInput[]
    OR?: submissionsScalarWhereInput[]
    NOT?: submissionsScalarWhereInput | submissionsScalarWhereInput[]
    submission_id?: IntFilter<"submissions"> | number
    fk_submissions_assignment_id?: IntFilter<"submissions"> | number
    fk_submissions_student_id?: IntNullableFilter<"submissions"> | number | null
    file_url?: StringFilter<"submissions"> | string
    submitted_at?: DateTimeFilter<"submissions"> | Date | string
  }

  export type coursesCreateWithoutAttendanceInput = {
    name: string
    description?: string | null
    code: string
    created_at?: Date | string
    course_img?: string | null
    deleted_at?: Date | string | null
    assignments?: assignmentsCreateNestedManyWithoutCoursesInput
    course_members?: course_membersCreateNestedManyWithoutCoursesInput
    users: usersCreateNestedOneWithoutCoursesInput
  }

  export type coursesUncheckedCreateWithoutAttendanceInput = {
    course_id?: number
    name: string
    description?: string | null
    code: string
    fk_courses_teacher_id: number
    created_at?: Date | string
    course_img?: string | null
    deleted_at?: Date | string | null
    assignments?: assignmentsUncheckedCreateNestedManyWithoutCoursesInput
    course_members?: course_membersUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type coursesCreateOrConnectWithoutAttendanceInput = {
    where: coursesWhereUniqueInput
    create: XOR<coursesCreateWithoutAttendanceInput, coursesUncheckedCreateWithoutAttendanceInput>
  }

  export type usersCreateWithoutAttendanceInput = {
    name: string
    email: string
    password: string
    role: $Enums.users_role
    created_at?: Date | string
    profile_picture?: string | null
    deleted_at?: Date | string | null
    course_members?: course_membersCreateNestedManyWithoutUsersInput
    courses?: coursesCreateNestedManyWithoutUsersInput
    grades?: gradesCreateNestedManyWithoutUsersInput
    submissions?: submissionsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutAttendanceInput = {
    user_id?: number
    name: string
    email: string
    password: string
    role: $Enums.users_role
    created_at?: Date | string
    profile_picture?: string | null
    deleted_at?: Date | string | null
    course_members?: course_membersUncheckedCreateNestedManyWithoutUsersInput
    courses?: coursesUncheckedCreateNestedManyWithoutUsersInput
    grades?: gradesUncheckedCreateNestedManyWithoutUsersInput
    submissions?: submissionsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutAttendanceInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutAttendanceInput, usersUncheckedCreateWithoutAttendanceInput>
  }

  export type coursesUpsertWithoutAttendanceInput = {
    update: XOR<coursesUpdateWithoutAttendanceInput, coursesUncheckedUpdateWithoutAttendanceInput>
    create: XOR<coursesCreateWithoutAttendanceInput, coursesUncheckedCreateWithoutAttendanceInput>
    where?: coursesWhereInput
  }

  export type coursesUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: coursesWhereInput
    data: XOR<coursesUpdateWithoutAttendanceInput, coursesUncheckedUpdateWithoutAttendanceInput>
  }

  export type coursesUpdateWithoutAttendanceInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course_img?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: assignmentsUpdateManyWithoutCoursesNestedInput
    course_members?: course_membersUpdateManyWithoutCoursesNestedInput
    users?: usersUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateWithoutAttendanceInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    fk_courses_teacher_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course_img?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: assignmentsUncheckedUpdateManyWithoutCoursesNestedInput
    course_members?: course_membersUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type usersUpsertWithoutAttendanceInput = {
    update: XOR<usersUpdateWithoutAttendanceInput, usersUncheckedUpdateWithoutAttendanceInput>
    create: XOR<usersCreateWithoutAttendanceInput, usersUncheckedCreateWithoutAttendanceInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutAttendanceInput, usersUncheckedUpdateWithoutAttendanceInput>
  }

  export type usersUpdateWithoutAttendanceInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_members?: course_membersUpdateManyWithoutUsersNestedInput
    courses?: coursesUpdateManyWithoutUsersNestedInput
    grades?: gradesUpdateManyWithoutUsersNestedInput
    submissions?: submissionsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutAttendanceInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_members?: course_membersUncheckedUpdateManyWithoutUsersNestedInput
    courses?: coursesUncheckedUpdateManyWithoutUsersNestedInput
    grades?: gradesUncheckedUpdateManyWithoutUsersNestedInput
    submissions?: submissionsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type coursesCreateWithoutCourse_membersInput = {
    name: string
    description?: string | null
    code: string
    created_at?: Date | string
    course_img?: string | null
    deleted_at?: Date | string | null
    assignments?: assignmentsCreateNestedManyWithoutCoursesInput
    attendance?: attendanceCreateNestedManyWithoutCoursesInput
    users: usersCreateNestedOneWithoutCoursesInput
  }

  export type coursesUncheckedCreateWithoutCourse_membersInput = {
    course_id?: number
    name: string
    description?: string | null
    code: string
    fk_courses_teacher_id: number
    created_at?: Date | string
    course_img?: string | null
    deleted_at?: Date | string | null
    assignments?: assignmentsUncheckedCreateNestedManyWithoutCoursesInput
    attendance?: attendanceUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type coursesCreateOrConnectWithoutCourse_membersInput = {
    where: coursesWhereUniqueInput
    create: XOR<coursesCreateWithoutCourse_membersInput, coursesUncheckedCreateWithoutCourse_membersInput>
  }

  export type usersCreateWithoutCourse_membersInput = {
    name: string
    email: string
    password: string
    role: $Enums.users_role
    created_at?: Date | string
    profile_picture?: string | null
    deleted_at?: Date | string | null
    attendance?: attendanceCreateNestedManyWithoutUsersInput
    courses?: coursesCreateNestedManyWithoutUsersInput
    grades?: gradesCreateNestedManyWithoutUsersInput
    submissions?: submissionsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutCourse_membersInput = {
    user_id?: number
    name: string
    email: string
    password: string
    role: $Enums.users_role
    created_at?: Date | string
    profile_picture?: string | null
    deleted_at?: Date | string | null
    attendance?: attendanceUncheckedCreateNestedManyWithoutUsersInput
    courses?: coursesUncheckedCreateNestedManyWithoutUsersInput
    grades?: gradesUncheckedCreateNestedManyWithoutUsersInput
    submissions?: submissionsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutCourse_membersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCourse_membersInput, usersUncheckedCreateWithoutCourse_membersInput>
  }

  export type coursesUpsertWithoutCourse_membersInput = {
    update: XOR<coursesUpdateWithoutCourse_membersInput, coursesUncheckedUpdateWithoutCourse_membersInput>
    create: XOR<coursesCreateWithoutCourse_membersInput, coursesUncheckedCreateWithoutCourse_membersInput>
    where?: coursesWhereInput
  }

  export type coursesUpdateToOneWithWhereWithoutCourse_membersInput = {
    where?: coursesWhereInput
    data: XOR<coursesUpdateWithoutCourse_membersInput, coursesUncheckedUpdateWithoutCourse_membersInput>
  }

  export type coursesUpdateWithoutCourse_membersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course_img?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: assignmentsUpdateManyWithoutCoursesNestedInput
    attendance?: attendanceUpdateManyWithoutCoursesNestedInput
    users?: usersUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateWithoutCourse_membersInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    fk_courses_teacher_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course_img?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: assignmentsUncheckedUpdateManyWithoutCoursesNestedInput
    attendance?: attendanceUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type usersUpsertWithoutCourse_membersInput = {
    update: XOR<usersUpdateWithoutCourse_membersInput, usersUncheckedUpdateWithoutCourse_membersInput>
    create: XOR<usersCreateWithoutCourse_membersInput, usersUncheckedCreateWithoutCourse_membersInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutCourse_membersInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutCourse_membersInput, usersUncheckedUpdateWithoutCourse_membersInput>
  }

  export type usersUpdateWithoutCourse_membersInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendance?: attendanceUpdateManyWithoutUsersNestedInput
    courses?: coursesUpdateManyWithoutUsersNestedInput
    grades?: gradesUpdateManyWithoutUsersNestedInput
    submissions?: submissionsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutCourse_membersInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendance?: attendanceUncheckedUpdateManyWithoutUsersNestedInput
    courses?: coursesUncheckedUpdateManyWithoutUsersNestedInput
    grades?: gradesUncheckedUpdateManyWithoutUsersNestedInput
    submissions?: submissionsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type assignmentsCreateWithoutCoursesInput = {
    title: string
    description: string
    deadline: Date | string
    file_url?: string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
    submissions?: submissionsCreateNestedManyWithoutAssignmentsInput
  }

  export type assignmentsUncheckedCreateWithoutCoursesInput = {
    assignment_id?: number
    title: string
    description: string
    deadline: Date | string
    file_url?: string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
    submissions?: submissionsUncheckedCreateNestedManyWithoutAssignmentsInput
  }

  export type assignmentsCreateOrConnectWithoutCoursesInput = {
    where: assignmentsWhereUniqueInput
    create: XOR<assignmentsCreateWithoutCoursesInput, assignmentsUncheckedCreateWithoutCoursesInput>
  }

  export type assignmentsCreateManyCoursesInputEnvelope = {
    data: assignmentsCreateManyCoursesInput | assignmentsCreateManyCoursesInput[]
    skipDuplicates?: boolean
  }

  export type attendanceCreateWithoutCoursesInput = {
    status: $Enums.attendance_status
    date: Date | string
    deleted_at?: Date | string | null
    users: usersCreateNestedOneWithoutAttendanceInput
  }

  export type attendanceUncheckedCreateWithoutCoursesInput = {
    attendance_id?: number
    fk_attendances_student_id: number
    status: $Enums.attendance_status
    date: Date | string
    deleted_at?: Date | string | null
  }

  export type attendanceCreateOrConnectWithoutCoursesInput = {
    where: attendanceWhereUniqueInput
    create: XOR<attendanceCreateWithoutCoursesInput, attendanceUncheckedCreateWithoutCoursesInput>
  }

  export type attendanceCreateManyCoursesInputEnvelope = {
    data: attendanceCreateManyCoursesInput | attendanceCreateManyCoursesInput[]
    skipDuplicates?: boolean
  }

  export type course_membersCreateWithoutCoursesInput = {
    role: $Enums.course_members_role
    joined_at?: Date | string
    users: usersCreateNestedOneWithoutCourse_membersInput
  }

  export type course_membersUncheckedCreateWithoutCoursesInput = {
    fk_course_members_user_id: number
    role: $Enums.course_members_role
    joined_at?: Date | string
  }

  export type course_membersCreateOrConnectWithoutCoursesInput = {
    where: course_membersWhereUniqueInput
    create: XOR<course_membersCreateWithoutCoursesInput, course_membersUncheckedCreateWithoutCoursesInput>
  }

  export type course_membersCreateManyCoursesInputEnvelope = {
    data: course_membersCreateManyCoursesInput | course_membersCreateManyCoursesInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutCoursesInput = {
    name: string
    email: string
    password: string
    role: $Enums.users_role
    created_at?: Date | string
    profile_picture?: string | null
    deleted_at?: Date | string | null
    attendance?: attendanceCreateNestedManyWithoutUsersInput
    course_members?: course_membersCreateNestedManyWithoutUsersInput
    grades?: gradesCreateNestedManyWithoutUsersInput
    submissions?: submissionsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutCoursesInput = {
    user_id?: number
    name: string
    email: string
    password: string
    role: $Enums.users_role
    created_at?: Date | string
    profile_picture?: string | null
    deleted_at?: Date | string | null
    attendance?: attendanceUncheckedCreateNestedManyWithoutUsersInput
    course_members?: course_membersUncheckedCreateNestedManyWithoutUsersInput
    grades?: gradesUncheckedCreateNestedManyWithoutUsersInput
    submissions?: submissionsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutCoursesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCoursesInput, usersUncheckedCreateWithoutCoursesInput>
  }

  export type assignmentsUpsertWithWhereUniqueWithoutCoursesInput = {
    where: assignmentsWhereUniqueInput
    update: XOR<assignmentsUpdateWithoutCoursesInput, assignmentsUncheckedUpdateWithoutCoursesInput>
    create: XOR<assignmentsCreateWithoutCoursesInput, assignmentsUncheckedCreateWithoutCoursesInput>
  }

  export type assignmentsUpdateWithWhereUniqueWithoutCoursesInput = {
    where: assignmentsWhereUniqueInput
    data: XOR<assignmentsUpdateWithoutCoursesInput, assignmentsUncheckedUpdateWithoutCoursesInput>
  }

  export type assignmentsUpdateManyWithWhereWithoutCoursesInput = {
    where: assignmentsScalarWhereInput
    data: XOR<assignmentsUpdateManyMutationInput, assignmentsUncheckedUpdateManyWithoutCoursesInput>
  }

  export type assignmentsScalarWhereInput = {
    AND?: assignmentsScalarWhereInput | assignmentsScalarWhereInput[]
    OR?: assignmentsScalarWhereInput[]
    NOT?: assignmentsScalarWhereInput | assignmentsScalarWhereInput[]
    assignment_id?: IntFilter<"assignments"> | number
    fk_assignments_course_id?: IntFilter<"assignments"> | number
    title?: StringFilter<"assignments"> | string
    description?: StringFilter<"assignments"> | string
    deadline?: DateTimeFilter<"assignments"> | Date | string
    file_url?: StringNullableFilter<"assignments"> | string | null
    created_at?: DateTimeFilter<"assignments"> | Date | string
    deleted_at?: DateTimeNullableFilter<"assignments"> | Date | string | null
  }

  export type attendanceUpsertWithWhereUniqueWithoutCoursesInput = {
    where: attendanceWhereUniqueInput
    update: XOR<attendanceUpdateWithoutCoursesInput, attendanceUncheckedUpdateWithoutCoursesInput>
    create: XOR<attendanceCreateWithoutCoursesInput, attendanceUncheckedCreateWithoutCoursesInput>
  }

  export type attendanceUpdateWithWhereUniqueWithoutCoursesInput = {
    where: attendanceWhereUniqueInput
    data: XOR<attendanceUpdateWithoutCoursesInput, attendanceUncheckedUpdateWithoutCoursesInput>
  }

  export type attendanceUpdateManyWithWhereWithoutCoursesInput = {
    where: attendanceScalarWhereInput
    data: XOR<attendanceUpdateManyMutationInput, attendanceUncheckedUpdateManyWithoutCoursesInput>
  }

  export type attendanceScalarWhereInput = {
    AND?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
    OR?: attendanceScalarWhereInput[]
    NOT?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
    attendance_id?: IntFilter<"attendance"> | number
    fk_attendances_course_id?: IntFilter<"attendance"> | number
    fk_attendances_student_id?: IntFilter<"attendance"> | number
    status?: Enumattendance_statusFilter<"attendance"> | $Enums.attendance_status
    date?: DateTimeFilter<"attendance"> | Date | string
    deleted_at?: DateTimeNullableFilter<"attendance"> | Date | string | null
  }

  export type course_membersUpsertWithWhereUniqueWithoutCoursesInput = {
    where: course_membersWhereUniqueInput
    update: XOR<course_membersUpdateWithoutCoursesInput, course_membersUncheckedUpdateWithoutCoursesInput>
    create: XOR<course_membersCreateWithoutCoursesInput, course_membersUncheckedCreateWithoutCoursesInput>
  }

  export type course_membersUpdateWithWhereUniqueWithoutCoursesInput = {
    where: course_membersWhereUniqueInput
    data: XOR<course_membersUpdateWithoutCoursesInput, course_membersUncheckedUpdateWithoutCoursesInput>
  }

  export type course_membersUpdateManyWithWhereWithoutCoursesInput = {
    where: course_membersScalarWhereInput
    data: XOR<course_membersUpdateManyMutationInput, course_membersUncheckedUpdateManyWithoutCoursesInput>
  }

  export type course_membersScalarWhereInput = {
    AND?: course_membersScalarWhereInput | course_membersScalarWhereInput[]
    OR?: course_membersScalarWhereInput[]
    NOT?: course_membersScalarWhereInput | course_membersScalarWhereInput[]
    fk_course_members_course_id?: IntFilter<"course_members"> | number
    fk_course_members_user_id?: IntFilter<"course_members"> | number
    role?: Enumcourse_members_roleFilter<"course_members"> | $Enums.course_members_role
    joined_at?: DateTimeFilter<"course_members"> | Date | string
  }

  export type usersUpsertWithoutCoursesInput = {
    update: XOR<usersUpdateWithoutCoursesInput, usersUncheckedUpdateWithoutCoursesInput>
    create: XOR<usersCreateWithoutCoursesInput, usersUncheckedCreateWithoutCoursesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutCoursesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutCoursesInput, usersUncheckedUpdateWithoutCoursesInput>
  }

  export type usersUpdateWithoutCoursesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendance?: attendanceUpdateManyWithoutUsersNestedInput
    course_members?: course_membersUpdateManyWithoutUsersNestedInput
    grades?: gradesUpdateManyWithoutUsersNestedInput
    submissions?: submissionsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutCoursesInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendance?: attendanceUncheckedUpdateManyWithoutUsersNestedInput
    course_members?: course_membersUncheckedUpdateManyWithoutUsersNestedInput
    grades?: gradesUncheckedUpdateManyWithoutUsersNestedInput
    submissions?: submissionsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type submissionsCreateWithoutGradesInput = {
    file_url: string
    submitted_at?: Date | string
    assignments: assignmentsCreateNestedOneWithoutSubmissionsInput
    users?: usersCreateNestedOneWithoutSubmissionsInput
  }

  export type submissionsUncheckedCreateWithoutGradesInput = {
    submission_id?: number
    fk_submissions_assignment_id: number
    fk_submissions_student_id?: number | null
    file_url: string
    submitted_at?: Date | string
  }

  export type submissionsCreateOrConnectWithoutGradesInput = {
    where: submissionsWhereUniqueInput
    create: XOR<submissionsCreateWithoutGradesInput, submissionsUncheckedCreateWithoutGradesInput>
  }

  export type usersCreateWithoutGradesInput = {
    name: string
    email: string
    password: string
    role: $Enums.users_role
    created_at?: Date | string
    profile_picture?: string | null
    deleted_at?: Date | string | null
    attendance?: attendanceCreateNestedManyWithoutUsersInput
    course_members?: course_membersCreateNestedManyWithoutUsersInput
    courses?: coursesCreateNestedManyWithoutUsersInput
    submissions?: submissionsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutGradesInput = {
    user_id?: number
    name: string
    email: string
    password: string
    role: $Enums.users_role
    created_at?: Date | string
    profile_picture?: string | null
    deleted_at?: Date | string | null
    attendance?: attendanceUncheckedCreateNestedManyWithoutUsersInput
    course_members?: course_membersUncheckedCreateNestedManyWithoutUsersInput
    courses?: coursesUncheckedCreateNestedManyWithoutUsersInput
    submissions?: submissionsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutGradesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutGradesInput, usersUncheckedCreateWithoutGradesInput>
  }

  export type submissionsUpsertWithoutGradesInput = {
    update: XOR<submissionsUpdateWithoutGradesInput, submissionsUncheckedUpdateWithoutGradesInput>
    create: XOR<submissionsCreateWithoutGradesInput, submissionsUncheckedCreateWithoutGradesInput>
    where?: submissionsWhereInput
  }

  export type submissionsUpdateToOneWithWhereWithoutGradesInput = {
    where?: submissionsWhereInput
    data: XOR<submissionsUpdateWithoutGradesInput, submissionsUncheckedUpdateWithoutGradesInput>
  }

  export type submissionsUpdateWithoutGradesInput = {
    file_url?: StringFieldUpdateOperationsInput | string
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: assignmentsUpdateOneRequiredWithoutSubmissionsNestedInput
    users?: usersUpdateOneWithoutSubmissionsNestedInput
  }

  export type submissionsUncheckedUpdateWithoutGradesInput = {
    submission_id?: IntFieldUpdateOperationsInput | number
    fk_submissions_assignment_id?: IntFieldUpdateOperationsInput | number
    fk_submissions_student_id?: NullableIntFieldUpdateOperationsInput | number | null
    file_url?: StringFieldUpdateOperationsInput | string
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUpsertWithoutGradesInput = {
    update: XOR<usersUpdateWithoutGradesInput, usersUncheckedUpdateWithoutGradesInput>
    create: XOR<usersCreateWithoutGradesInput, usersUncheckedCreateWithoutGradesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutGradesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutGradesInput, usersUncheckedUpdateWithoutGradesInput>
  }

  export type usersUpdateWithoutGradesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendance?: attendanceUpdateManyWithoutUsersNestedInput
    course_members?: course_membersUpdateManyWithoutUsersNestedInput
    courses?: coursesUpdateManyWithoutUsersNestedInput
    submissions?: submissionsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutGradesInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendance?: attendanceUncheckedUpdateManyWithoutUsersNestedInput
    course_members?: course_membersUncheckedUpdateManyWithoutUsersNestedInput
    courses?: coursesUncheckedUpdateManyWithoutUsersNestedInput
    submissions?: submissionsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type gradesCreateWithoutSubmissionsInput = {
    score?: Decimal | DecimalJsLike | number | string | null
    feedback?: string | null
    graded_at?: Date | string
    users?: usersCreateNestedOneWithoutGradesInput
  }

  export type gradesUncheckedCreateWithoutSubmissionsInput = {
    grades_id?: number
    fk_grades_teacher_id?: number | null
    score?: Decimal | DecimalJsLike | number | string | null
    feedback?: string | null
    graded_at?: Date | string
  }

  export type gradesCreateOrConnectWithoutSubmissionsInput = {
    where: gradesWhereUniqueInput
    create: XOR<gradesCreateWithoutSubmissionsInput, gradesUncheckedCreateWithoutSubmissionsInput>
  }

  export type gradesCreateManySubmissionsInputEnvelope = {
    data: gradesCreateManySubmissionsInput | gradesCreateManySubmissionsInput[]
    skipDuplicates?: boolean
  }

  export type assignmentsCreateWithoutSubmissionsInput = {
    title: string
    description: string
    deadline: Date | string
    file_url?: string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
    courses: coursesCreateNestedOneWithoutAssignmentsInput
  }

  export type assignmentsUncheckedCreateWithoutSubmissionsInput = {
    assignment_id?: number
    fk_assignments_course_id: number
    title: string
    description: string
    deadline: Date | string
    file_url?: string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
  }

  export type assignmentsCreateOrConnectWithoutSubmissionsInput = {
    where: assignmentsWhereUniqueInput
    create: XOR<assignmentsCreateWithoutSubmissionsInput, assignmentsUncheckedCreateWithoutSubmissionsInput>
  }

  export type usersCreateWithoutSubmissionsInput = {
    name: string
    email: string
    password: string
    role: $Enums.users_role
    created_at?: Date | string
    profile_picture?: string | null
    deleted_at?: Date | string | null
    attendance?: attendanceCreateNestedManyWithoutUsersInput
    course_members?: course_membersCreateNestedManyWithoutUsersInput
    courses?: coursesCreateNestedManyWithoutUsersInput
    grades?: gradesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutSubmissionsInput = {
    user_id?: number
    name: string
    email: string
    password: string
    role: $Enums.users_role
    created_at?: Date | string
    profile_picture?: string | null
    deleted_at?: Date | string | null
    attendance?: attendanceUncheckedCreateNestedManyWithoutUsersInput
    course_members?: course_membersUncheckedCreateNestedManyWithoutUsersInput
    courses?: coursesUncheckedCreateNestedManyWithoutUsersInput
    grades?: gradesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutSubmissionsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutSubmissionsInput, usersUncheckedCreateWithoutSubmissionsInput>
  }

  export type gradesUpsertWithWhereUniqueWithoutSubmissionsInput = {
    where: gradesWhereUniqueInput
    update: XOR<gradesUpdateWithoutSubmissionsInput, gradesUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<gradesCreateWithoutSubmissionsInput, gradesUncheckedCreateWithoutSubmissionsInput>
  }

  export type gradesUpdateWithWhereUniqueWithoutSubmissionsInput = {
    where: gradesWhereUniqueInput
    data: XOR<gradesUpdateWithoutSubmissionsInput, gradesUncheckedUpdateWithoutSubmissionsInput>
  }

  export type gradesUpdateManyWithWhereWithoutSubmissionsInput = {
    where: gradesScalarWhereInput
    data: XOR<gradesUpdateManyMutationInput, gradesUncheckedUpdateManyWithoutSubmissionsInput>
  }

  export type gradesScalarWhereInput = {
    AND?: gradesScalarWhereInput | gradesScalarWhereInput[]
    OR?: gradesScalarWhereInput[]
    NOT?: gradesScalarWhereInput | gradesScalarWhereInput[]
    grades_id?: IntFilter<"grades"> | number
    fk_grades_submission_id?: IntNullableFilter<"grades"> | number | null
    fk_grades_teacher_id?: IntNullableFilter<"grades"> | number | null
    score?: DecimalNullableFilter<"grades"> | Decimal | DecimalJsLike | number | string | null
    feedback?: StringNullableFilter<"grades"> | string | null
    graded_at?: DateTimeFilter<"grades"> | Date | string
  }

  export type assignmentsUpsertWithoutSubmissionsInput = {
    update: XOR<assignmentsUpdateWithoutSubmissionsInput, assignmentsUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<assignmentsCreateWithoutSubmissionsInput, assignmentsUncheckedCreateWithoutSubmissionsInput>
    where?: assignmentsWhereInput
  }

  export type assignmentsUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: assignmentsWhereInput
    data: XOR<assignmentsUpdateWithoutSubmissionsInput, assignmentsUncheckedUpdateWithoutSubmissionsInput>
  }

  export type assignmentsUpdateWithoutSubmissionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    file_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: coursesUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type assignmentsUncheckedUpdateWithoutSubmissionsInput = {
    assignment_id?: IntFieldUpdateOperationsInput | number
    fk_assignments_course_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    file_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUpsertWithoutSubmissionsInput = {
    update: XOR<usersUpdateWithoutSubmissionsInput, usersUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<usersCreateWithoutSubmissionsInput, usersUncheckedCreateWithoutSubmissionsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutSubmissionsInput, usersUncheckedUpdateWithoutSubmissionsInput>
  }

  export type usersUpdateWithoutSubmissionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendance?: attendanceUpdateManyWithoutUsersNestedInput
    course_members?: course_membersUpdateManyWithoutUsersNestedInput
    courses?: coursesUpdateManyWithoutUsersNestedInput
    grades?: gradesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutSubmissionsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendance?: attendanceUncheckedUpdateManyWithoutUsersNestedInput
    course_members?: course_membersUncheckedUpdateManyWithoutUsersNestedInput
    courses?: coursesUncheckedUpdateManyWithoutUsersNestedInput
    grades?: gradesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type attendanceCreateWithoutUsersInput = {
    status: $Enums.attendance_status
    date: Date | string
    deleted_at?: Date | string | null
    courses: coursesCreateNestedOneWithoutAttendanceInput
  }

  export type attendanceUncheckedCreateWithoutUsersInput = {
    attendance_id?: number
    fk_attendances_course_id: number
    status: $Enums.attendance_status
    date: Date | string
    deleted_at?: Date | string | null
  }

  export type attendanceCreateOrConnectWithoutUsersInput = {
    where: attendanceWhereUniqueInput
    create: XOR<attendanceCreateWithoutUsersInput, attendanceUncheckedCreateWithoutUsersInput>
  }

  export type attendanceCreateManyUsersInputEnvelope = {
    data: attendanceCreateManyUsersInput | attendanceCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type course_membersCreateWithoutUsersInput = {
    role: $Enums.course_members_role
    joined_at?: Date | string
    courses: coursesCreateNestedOneWithoutCourse_membersInput
  }

  export type course_membersUncheckedCreateWithoutUsersInput = {
    fk_course_members_course_id: number
    role: $Enums.course_members_role
    joined_at?: Date | string
  }

  export type course_membersCreateOrConnectWithoutUsersInput = {
    where: course_membersWhereUniqueInput
    create: XOR<course_membersCreateWithoutUsersInput, course_membersUncheckedCreateWithoutUsersInput>
  }

  export type course_membersCreateManyUsersInputEnvelope = {
    data: course_membersCreateManyUsersInput | course_membersCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type coursesCreateWithoutUsersInput = {
    name: string
    description?: string | null
    code: string
    created_at?: Date | string
    course_img?: string | null
    deleted_at?: Date | string | null
    assignments?: assignmentsCreateNestedManyWithoutCoursesInput
    attendance?: attendanceCreateNestedManyWithoutCoursesInput
    course_members?: course_membersCreateNestedManyWithoutCoursesInput
  }

  export type coursesUncheckedCreateWithoutUsersInput = {
    course_id?: number
    name: string
    description?: string | null
    code: string
    created_at?: Date | string
    course_img?: string | null
    deleted_at?: Date | string | null
    assignments?: assignmentsUncheckedCreateNestedManyWithoutCoursesInput
    attendance?: attendanceUncheckedCreateNestedManyWithoutCoursesInput
    course_members?: course_membersUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type coursesCreateOrConnectWithoutUsersInput = {
    where: coursesWhereUniqueInput
    create: XOR<coursesCreateWithoutUsersInput, coursesUncheckedCreateWithoutUsersInput>
  }

  export type coursesCreateManyUsersInputEnvelope = {
    data: coursesCreateManyUsersInput | coursesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type gradesCreateWithoutUsersInput = {
    score?: Decimal | DecimalJsLike | number | string | null
    feedback?: string | null
    graded_at?: Date | string
    submissions?: submissionsCreateNestedOneWithoutGradesInput
  }

  export type gradesUncheckedCreateWithoutUsersInput = {
    grades_id?: number
    fk_grades_submission_id?: number | null
    score?: Decimal | DecimalJsLike | number | string | null
    feedback?: string | null
    graded_at?: Date | string
  }

  export type gradesCreateOrConnectWithoutUsersInput = {
    where: gradesWhereUniqueInput
    create: XOR<gradesCreateWithoutUsersInput, gradesUncheckedCreateWithoutUsersInput>
  }

  export type gradesCreateManyUsersInputEnvelope = {
    data: gradesCreateManyUsersInput | gradesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type submissionsCreateWithoutUsersInput = {
    file_url: string
    submitted_at?: Date | string
    grades?: gradesCreateNestedManyWithoutSubmissionsInput
    assignments: assignmentsCreateNestedOneWithoutSubmissionsInput
  }

  export type submissionsUncheckedCreateWithoutUsersInput = {
    submission_id?: number
    fk_submissions_assignment_id: number
    file_url: string
    submitted_at?: Date | string
    grades?: gradesUncheckedCreateNestedManyWithoutSubmissionsInput
  }

  export type submissionsCreateOrConnectWithoutUsersInput = {
    where: submissionsWhereUniqueInput
    create: XOR<submissionsCreateWithoutUsersInput, submissionsUncheckedCreateWithoutUsersInput>
  }

  export type submissionsCreateManyUsersInputEnvelope = {
    data: submissionsCreateManyUsersInput | submissionsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type attendanceUpsertWithWhereUniqueWithoutUsersInput = {
    where: attendanceWhereUniqueInput
    update: XOR<attendanceUpdateWithoutUsersInput, attendanceUncheckedUpdateWithoutUsersInput>
    create: XOR<attendanceCreateWithoutUsersInput, attendanceUncheckedCreateWithoutUsersInput>
  }

  export type attendanceUpdateWithWhereUniqueWithoutUsersInput = {
    where: attendanceWhereUniqueInput
    data: XOR<attendanceUpdateWithoutUsersInput, attendanceUncheckedUpdateWithoutUsersInput>
  }

  export type attendanceUpdateManyWithWhereWithoutUsersInput = {
    where: attendanceScalarWhereInput
    data: XOR<attendanceUpdateManyMutationInput, attendanceUncheckedUpdateManyWithoutUsersInput>
  }

  export type course_membersUpsertWithWhereUniqueWithoutUsersInput = {
    where: course_membersWhereUniqueInput
    update: XOR<course_membersUpdateWithoutUsersInput, course_membersUncheckedUpdateWithoutUsersInput>
    create: XOR<course_membersCreateWithoutUsersInput, course_membersUncheckedCreateWithoutUsersInput>
  }

  export type course_membersUpdateWithWhereUniqueWithoutUsersInput = {
    where: course_membersWhereUniqueInput
    data: XOR<course_membersUpdateWithoutUsersInput, course_membersUncheckedUpdateWithoutUsersInput>
  }

  export type course_membersUpdateManyWithWhereWithoutUsersInput = {
    where: course_membersScalarWhereInput
    data: XOR<course_membersUpdateManyMutationInput, course_membersUncheckedUpdateManyWithoutUsersInput>
  }

  export type coursesUpsertWithWhereUniqueWithoutUsersInput = {
    where: coursesWhereUniqueInput
    update: XOR<coursesUpdateWithoutUsersInput, coursesUncheckedUpdateWithoutUsersInput>
    create: XOR<coursesCreateWithoutUsersInput, coursesUncheckedCreateWithoutUsersInput>
  }

  export type coursesUpdateWithWhereUniqueWithoutUsersInput = {
    where: coursesWhereUniqueInput
    data: XOR<coursesUpdateWithoutUsersInput, coursesUncheckedUpdateWithoutUsersInput>
  }

  export type coursesUpdateManyWithWhereWithoutUsersInput = {
    where: coursesScalarWhereInput
    data: XOR<coursesUpdateManyMutationInput, coursesUncheckedUpdateManyWithoutUsersInput>
  }

  export type coursesScalarWhereInput = {
    AND?: coursesScalarWhereInput | coursesScalarWhereInput[]
    OR?: coursesScalarWhereInput[]
    NOT?: coursesScalarWhereInput | coursesScalarWhereInput[]
    course_id?: IntFilter<"courses"> | number
    name?: StringFilter<"courses"> | string
    description?: StringNullableFilter<"courses"> | string | null
    code?: StringFilter<"courses"> | string
    fk_courses_teacher_id?: IntFilter<"courses"> | number
    created_at?: DateTimeFilter<"courses"> | Date | string
    course_img?: StringNullableFilter<"courses"> | string | null
    deleted_at?: DateTimeNullableFilter<"courses"> | Date | string | null
  }

  export type gradesUpsertWithWhereUniqueWithoutUsersInput = {
    where: gradesWhereUniqueInput
    update: XOR<gradesUpdateWithoutUsersInput, gradesUncheckedUpdateWithoutUsersInput>
    create: XOR<gradesCreateWithoutUsersInput, gradesUncheckedCreateWithoutUsersInput>
  }

  export type gradesUpdateWithWhereUniqueWithoutUsersInput = {
    where: gradesWhereUniqueInput
    data: XOR<gradesUpdateWithoutUsersInput, gradesUncheckedUpdateWithoutUsersInput>
  }

  export type gradesUpdateManyWithWhereWithoutUsersInput = {
    where: gradesScalarWhereInput
    data: XOR<gradesUpdateManyMutationInput, gradesUncheckedUpdateManyWithoutUsersInput>
  }

  export type submissionsUpsertWithWhereUniqueWithoutUsersInput = {
    where: submissionsWhereUniqueInput
    update: XOR<submissionsUpdateWithoutUsersInput, submissionsUncheckedUpdateWithoutUsersInput>
    create: XOR<submissionsCreateWithoutUsersInput, submissionsUncheckedCreateWithoutUsersInput>
  }

  export type submissionsUpdateWithWhereUniqueWithoutUsersInput = {
    where: submissionsWhereUniqueInput
    data: XOR<submissionsUpdateWithoutUsersInput, submissionsUncheckedUpdateWithoutUsersInput>
  }

  export type submissionsUpdateManyWithWhereWithoutUsersInput = {
    where: submissionsScalarWhereInput
    data: XOR<submissionsUpdateManyMutationInput, submissionsUncheckedUpdateManyWithoutUsersInput>
  }

  export type submissionsCreateManyAssignmentsInput = {
    submission_id?: number
    fk_submissions_student_id?: number | null
    file_url: string
    submitted_at?: Date | string
  }

  export type submissionsUpdateWithoutAssignmentsInput = {
    file_url?: StringFieldUpdateOperationsInput | string
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    grades?: gradesUpdateManyWithoutSubmissionsNestedInput
    users?: usersUpdateOneWithoutSubmissionsNestedInput
  }

  export type submissionsUncheckedUpdateWithoutAssignmentsInput = {
    submission_id?: IntFieldUpdateOperationsInput | number
    fk_submissions_student_id?: NullableIntFieldUpdateOperationsInput | number | null
    file_url?: StringFieldUpdateOperationsInput | string
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    grades?: gradesUncheckedUpdateManyWithoutSubmissionsNestedInput
  }

  export type submissionsUncheckedUpdateManyWithoutAssignmentsInput = {
    submission_id?: IntFieldUpdateOperationsInput | number
    fk_submissions_student_id?: NullableIntFieldUpdateOperationsInput | number | null
    file_url?: StringFieldUpdateOperationsInput | string
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type assignmentsCreateManyCoursesInput = {
    assignment_id?: number
    title: string
    description: string
    deadline: Date | string
    file_url?: string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
  }

  export type attendanceCreateManyCoursesInput = {
    attendance_id?: number
    fk_attendances_student_id: number
    status: $Enums.attendance_status
    date: Date | string
    deleted_at?: Date | string | null
  }

  export type course_membersCreateManyCoursesInput = {
    fk_course_members_user_id: number
    role: $Enums.course_members_role
    joined_at?: Date | string
  }

  export type assignmentsUpdateWithoutCoursesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    file_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissions?: submissionsUpdateManyWithoutAssignmentsNestedInput
  }

  export type assignmentsUncheckedUpdateWithoutCoursesInput = {
    assignment_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    file_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissions?: submissionsUncheckedUpdateManyWithoutAssignmentsNestedInput
  }

  export type assignmentsUncheckedUpdateManyWithoutCoursesInput = {
    assignment_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    file_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type attendanceUpdateWithoutCoursesInput = {
    status?: Enumattendance_statusFieldUpdateOperationsInput | $Enums.attendance_status
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutAttendanceNestedInput
  }

  export type attendanceUncheckedUpdateWithoutCoursesInput = {
    attendance_id?: IntFieldUpdateOperationsInput | number
    fk_attendances_student_id?: IntFieldUpdateOperationsInput | number
    status?: Enumattendance_statusFieldUpdateOperationsInput | $Enums.attendance_status
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type attendanceUncheckedUpdateManyWithoutCoursesInput = {
    attendance_id?: IntFieldUpdateOperationsInput | number
    fk_attendances_student_id?: IntFieldUpdateOperationsInput | number
    status?: Enumattendance_statusFieldUpdateOperationsInput | $Enums.attendance_status
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type course_membersUpdateWithoutCoursesInput = {
    role?: Enumcourse_members_roleFieldUpdateOperationsInput | $Enums.course_members_role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutCourse_membersNestedInput
  }

  export type course_membersUncheckedUpdateWithoutCoursesInput = {
    fk_course_members_user_id?: IntFieldUpdateOperationsInput | number
    role?: Enumcourse_members_roleFieldUpdateOperationsInput | $Enums.course_members_role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type course_membersUncheckedUpdateManyWithoutCoursesInput = {
    fk_course_members_user_id?: IntFieldUpdateOperationsInput | number
    role?: Enumcourse_members_roleFieldUpdateOperationsInput | $Enums.course_members_role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type gradesCreateManySubmissionsInput = {
    grades_id?: number
    fk_grades_teacher_id?: number | null
    score?: Decimal | DecimalJsLike | number | string | null
    feedback?: string | null
    graded_at?: Date | string
  }

  export type gradesUpdateWithoutSubmissionsInput = {
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    graded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneWithoutGradesNestedInput
  }

  export type gradesUncheckedUpdateWithoutSubmissionsInput = {
    grades_id?: IntFieldUpdateOperationsInput | number
    fk_grades_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    graded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type gradesUncheckedUpdateManyWithoutSubmissionsInput = {
    grades_id?: IntFieldUpdateOperationsInput | number
    fk_grades_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    graded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type attendanceCreateManyUsersInput = {
    attendance_id?: number
    fk_attendances_course_id: number
    status: $Enums.attendance_status
    date: Date | string
    deleted_at?: Date | string | null
  }

  export type course_membersCreateManyUsersInput = {
    fk_course_members_course_id: number
    role: $Enums.course_members_role
    joined_at?: Date | string
  }

  export type coursesCreateManyUsersInput = {
    course_id?: number
    name: string
    description?: string | null
    code: string
    created_at?: Date | string
    course_img?: string | null
    deleted_at?: Date | string | null
  }

  export type gradesCreateManyUsersInput = {
    grades_id?: number
    fk_grades_submission_id?: number | null
    score?: Decimal | DecimalJsLike | number | string | null
    feedback?: string | null
    graded_at?: Date | string
  }

  export type submissionsCreateManyUsersInput = {
    submission_id?: number
    fk_submissions_assignment_id: number
    file_url: string
    submitted_at?: Date | string
  }

  export type attendanceUpdateWithoutUsersInput = {
    status?: Enumattendance_statusFieldUpdateOperationsInput | $Enums.attendance_status
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: coursesUpdateOneRequiredWithoutAttendanceNestedInput
  }

  export type attendanceUncheckedUpdateWithoutUsersInput = {
    attendance_id?: IntFieldUpdateOperationsInput | number
    fk_attendances_course_id?: IntFieldUpdateOperationsInput | number
    status?: Enumattendance_statusFieldUpdateOperationsInput | $Enums.attendance_status
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type attendanceUncheckedUpdateManyWithoutUsersInput = {
    attendance_id?: IntFieldUpdateOperationsInput | number
    fk_attendances_course_id?: IntFieldUpdateOperationsInput | number
    status?: Enumattendance_statusFieldUpdateOperationsInput | $Enums.attendance_status
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type course_membersUpdateWithoutUsersInput = {
    role?: Enumcourse_members_roleFieldUpdateOperationsInput | $Enums.course_members_role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: coursesUpdateOneRequiredWithoutCourse_membersNestedInput
  }

  export type course_membersUncheckedUpdateWithoutUsersInput = {
    fk_course_members_course_id?: IntFieldUpdateOperationsInput | number
    role?: Enumcourse_members_roleFieldUpdateOperationsInput | $Enums.course_members_role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type course_membersUncheckedUpdateManyWithoutUsersInput = {
    fk_course_members_course_id?: IntFieldUpdateOperationsInput | number
    role?: Enumcourse_members_roleFieldUpdateOperationsInput | $Enums.course_members_role
    joined_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type coursesUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course_img?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: assignmentsUpdateManyWithoutCoursesNestedInput
    attendance?: attendanceUpdateManyWithoutCoursesNestedInput
    course_members?: course_membersUpdateManyWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateWithoutUsersInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course_img?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: assignmentsUncheckedUpdateManyWithoutCoursesNestedInput
    attendance?: attendanceUncheckedUpdateManyWithoutCoursesNestedInput
    course_members?: course_membersUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateManyWithoutUsersInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course_img?: NullableStringFieldUpdateOperationsInput | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type gradesUpdateWithoutUsersInput = {
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    graded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: submissionsUpdateOneWithoutGradesNestedInput
  }

  export type gradesUncheckedUpdateWithoutUsersInput = {
    grades_id?: IntFieldUpdateOperationsInput | number
    fk_grades_submission_id?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    graded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type gradesUncheckedUpdateManyWithoutUsersInput = {
    grades_id?: IntFieldUpdateOperationsInput | number
    fk_grades_submission_id?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    graded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type submissionsUpdateWithoutUsersInput = {
    file_url?: StringFieldUpdateOperationsInput | string
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    grades?: gradesUpdateManyWithoutSubmissionsNestedInput
    assignments?: assignmentsUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type submissionsUncheckedUpdateWithoutUsersInput = {
    submission_id?: IntFieldUpdateOperationsInput | number
    fk_submissions_assignment_id?: IntFieldUpdateOperationsInput | number
    file_url?: StringFieldUpdateOperationsInput | string
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    grades?: gradesUncheckedUpdateManyWithoutSubmissionsNestedInput
  }

  export type submissionsUncheckedUpdateManyWithoutUsersInput = {
    submission_id?: IntFieldUpdateOperationsInput | number
    fk_submissions_assignment_id?: IntFieldUpdateOperationsInput | number
    file_url?: StringFieldUpdateOperationsInput | string
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}