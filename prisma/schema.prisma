generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model materials {
  material_id            Int       @id @default(autoincrement())
  fk_materials_course_id Int
  fk_materials_teacher_id Int
  title                  String    @db.VarChar(255)
  description            String?   @db.Text
  file_url               String?   @db.VarChar(255)
  created_at             DateTime  @default(now()) @db.Timestamp(0)
  deleted_at             DateTime? @db.Timestamp(0)
  courses                courses   @relation(fields: [fk_materials_course_id], references: [course_id], onDelete: Cascade, map: "fk_materials_course_id")
  users   users   @relation(fields: [fk_materials_teacher_id], references: [user_id], onDelete: Cascade, map: "fk_materials_teacher_id")

  @@index([fk_materials_course_id], map: "fk_materials_course_idx")
  @@index([fk_materials_teacher_id], map: "fk_teacher_id_idx")
}

model assignments {
  assignment_id            Int           @id @default(autoincrement())
  fk_assignments_course_id Int
  title                    String        @db.VarChar(255)
  description              String        @db.Text
  deadline                 DateTime      @db.DateTime(0)
  file_url                 String?       @db.VarChar(255)
  created_at               DateTime      @default(now()) @db.Timestamp(0)
  deleted_at               DateTime?     @db.Timestamp(0)
  courses                  courses       @relation(fields: [fk_assignments_course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_course_id")
  submissions              submissions[]

  @@index([fk_assignments_course_id], map: "fk_course_id_idx")
}

model course_members {
  fk_course_members_course_id Int
  fk_course_members_user_id   Int
  role                        course_members_role
  joined_at                   DateTime            @default(now()) @db.Timestamp(0)
  courses                     courses             @relation(fields: [fk_course_members_course_id], references: [course_id], onDelete: Cascade, map: "fk_course_members_course_id")
  users                       users               @relation(fields: [fk_course_members_user_id], references: [user_id], onDelete: Cascade, map: "fk_course_members_user_id")

  @@id([fk_course_members_course_id, fk_course_members_user_id])
  @@index([fk_course_members_course_id], map: "course_id_idx")
  @@index([fk_course_members_user_id], map: "user_id_idx")
}

model courses {
  course_id             Int              @id @default(autoincrement())
  name                  String           @db.VarChar(45)
  description           String?          @db.Text
  code                  String           @unique(map: "code_UNIQUE") @db.VarChar(7)
  fk_courses_teacher_id Int
  created_at            DateTime         @default(now()) @db.Timestamp(0)
  course_img            String?          @db.VarChar(255)
  deleted_at            DateTime?        @db.Timestamp(0)
  assignments           assignments[]
  attendances           attendances[]
  course_members        course_members[]
  materials materials[]
  users                 users            @relation(fields: [fk_courses_teacher_id], references: [user_id], onDelete: Cascade, map: "fk_courses_teacher_id")

  @@index([fk_courses_teacher_id], map: "teacher_id_idx")
}

model grades {
  grades_id               Int          @id @default(autoincrement())
  fk_grades_submission_id Int?
  fk_grades_teacher_id    Int?
  score                   Decimal?     @db.Decimal(10, 0)
  feedback                String?      @db.Text
  graded_at               DateTime     @default(now()) @db.Timestamp(0)
  submissions             submissions? @relation(fields: [fk_grades_submission_id], references: [submission_id], onDelete: Cascade, map: "fk_grades_submission_id")
  users                   users?       @relation(fields: [fk_grades_teacher_id], references: [user_id], map: "fk_grades_teacher_id")

  @@index([fk_grades_submission_id], map: "submission_id_idx")
  @@index([fk_grades_teacher_id], map: "teacher_id_idx")
}

model submissions {
  submission_id                Int         @id @default(autoincrement())
  fk_submissions_assignment_id Int
  fk_submissions_student_id    Int?
  file_url                     String      @db.VarChar(255)
  submitted_at                 DateTime    @default(now()) @db.Timestamp(0)
  grades                       grades[]
  assignments                  assignments @relation(fields: [fk_submissions_assignment_id], references: [assignment_id], onDelete: Cascade, map: "fk_submissions_assignment_id")
  users                        users?      @relation(fields: [fk_submissions_student_id], references: [user_id], onDelete: Cascade, map: "fk_submissions_student_id")

  @@index([fk_submissions_assignment_id], map: "assignment_id_idx")
  @@index([fk_submissions_student_id], map: "student_id_idx")
}

model users {
  user_id            Int                  @id @default(autoincrement())
  name               String               @db.VarChar(45)
  email              String               @unique(map: "email_UNIQUE") @db.VarChar(100)
  password           String               @db.VarChar(255)
  role               users_role
  created_at         DateTime             @default(now()) @db.Timestamp(0)
  profile_picture    String?              @db.VarChar(255)
  deleted_at         DateTime?            @db.Timestamp(0)
  attendance_records attendance_records[]
  course_members     course_members[]
  courses            courses[]
  grades             grades[]
  submissions        submissions[]
  materials materials[]
}

model attendance_records {
  attendance_record_id                 Int                       @id @default(autoincrement())
  fk_attendance_records_student_id     Int
  fk_attendance_records_attendances_id Int
  status                               attendance_records_status
  fill_date                            DateTime                  @default(now()) @db.DateTime(0)
  users                                users                     @relation(fields: [fk_attendance_records_student_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "attendance_records_ibfk_1")
  attendances                          attendances               @relation(fields: [fk_attendance_records_attendances_id], references: [attendance_id], onDelete: NoAction, onUpdate: NoAction, map: "attendance_records_ibfk_2")

  @@index([fk_attendance_records_attendances_id], map: "fk_attendance_records_attendances_id")
  @@index([fk_attendance_records_student_id], map: "fk_attendance_records_student_id")
}

model attendances {
  attendance_id            Int                  @id @default(autoincrement())
  fk_attendances_course_id Int
  deleted_at               DateTime?            @db.Timestamp(0)
  deadline                 DateTime?            @db.Date
  notes                    String               @db.VarChar(255)
  created_at               DateTime             @default(now()) @db.DateTime(0)
  attendance_records       attendance_records[]
  courses                  courses              @relation(fields: [fk_attendances_course_id], references: [course_id], onDelete: Cascade, map: "fk_attendances_id")

  @@index([fk_attendances_course_id], map: "course_id_idx")
}

enum course_members_role {
  admin
  teacher
  student
}

enum users_role {
  admin
  teacher
  student
}

enum attendance_records_status {
  absent
  present
  excused
  late
}
